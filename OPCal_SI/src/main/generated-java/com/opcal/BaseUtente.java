package com.opcal;

import java.io.Serializable;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ColumnAccessByName;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.util.TorqueConnection;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 13 14:45:20 CET 2025]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to Utente
 */
@SuppressWarnings("unused")
public abstract class BaseUtente 
    implements Persistent, Serializable, ColumnAccessByName
{
    /** Serial version */
    private static final long serialVersionUID = 1741873520407L;



    /** Email utente */
    private String email = null;

    /** Nome utente */
    private String nome = null;

    /** password utente */
    private String password = null;

    /** Cognome utente */
    private String cognome = null;

    /** Whether this object was modified after loading or after last save. */
    private boolean modified = true;

    /** 
     * Whether this object was loaded from the database or already saved 
     * (false) or whether it is not yet in the database(true).
     */
    private boolean isNew = true;

    /** Flag which indicates whether this object is currently saving. */
    private boolean saving = false;

    /** 
     * Flag which indicates whether this object is currently loaded
     * from the database. 
     */
    private boolean loading = false;

    /** 
     * Flag which indicates whether this object was deleted from the database.
     * Note that this flags does not always display the current database state,
     * there is no magical connection between this flag and the database.
     */
    private boolean deleted = false;



    /** Defines the collClientes field. */
    protected List<Cliente> collClientes = null;

    /** Defines the collAmministratores field. */
    protected List<Amministratore> collAmministratores = null;

    /** Defines the collDipendentes field. */
    protected List<Dipendente> collDipendentes = null;



    /**
     * Get the value of email.
     * The field is described as follows: 
     * Email utente
     *
     * @return the value of email as String
     */
    public String getEmail() 
    {
        
        return email;
    }

    /**
     * Set the value of email.
     * The field is described as follows: 
     * Email utente
     *
     * @param v new value of email
     */
    public void setEmail(String v)
    {
        if (!Objects.equals(this.email, v))
        {
            setModified(true);
        }

        this.email = v;

        // update associated objects in collClientes 
        if (collClientes != null)
        {
            for (Cliente element : collClientes)
            {
                element.setEmail(v);
            }
        }
        // update associated objects in collAmministratores 
        if (collAmministratores != null)
        {
            for (Amministratore element : collAmministratores)
            {
                element.setEmail(v);
            }
        }
        // update associated objects in collDipendentes 
        if (collDipendentes != null)
        {
            for (Dipendente element : collDipendentes)
            {
                element.setEmail(v);
            }
        }

    }
    
    /**
     * Get the value of nome.
     * The field is described as follows: 
     * Nome utente
     *
     * @return the value of nome as String
     */
    public String getNome() 
    {
        
        return nome;
    }

    /**
     * Set the value of nome.
     * The field is described as follows: 
     * Nome utente
     *
     * @param v new value of nome
     */
    public void setNome(String v)
    {
        if (!Objects.equals(this.nome, v))
        {
            setModified(true);
        }

        this.nome = v;


    }
    
    /**
     * Get the value of password.
     * The field is described as follows: 
     * password utente
     *
     * @return the value of password as String
     */
    public String getPassword() 
    {
        
        return password;
    }

    /**
     * Set the value of password.
     * The field is described as follows: 
     * password utente
     *
     * @param v new value of password
     */
    public void setPassword(String v)
    {
        if (!Objects.equals(this.password, v))
        {
            setModified(true);
        }

        this.password = v;


    }
    
    /**
     * Get the value of cognome.
     * The field is described as follows: 
     * Cognome utente
     *
     * @return the value of cognome as String
     */
    public String getCognome() 
    {
        
        return cognome;
    }

    /**
     * Set the value of cognome.
     * The field is described as follows: 
     * Cognome utente
     *
     * @param v new value of cognome
     */
    public void setCognome(String v)
    {
        if (!Objects.equals(this.cognome, v))
        {
            setModified(true);
        }

        this.cognome = v;


    }
    

    /**
     * Returns whether the object has ever been saved.  This will
     * be false, if the object was retrieved from storage or was created
     * and then saved.
     *
     * @return true, if the object has never been persisted.
     */
    public boolean isNew()
    {
        return isNew;
    }

    /**
     * Sets whether the object has ever been saved.
     *
     * @param isNew true if the object has never been saved, false otherwise.
     */
    public void setNew(boolean isNew)
    {
        this.isNew = isNew;
    }

    /**
     * Returns whether the object has been modified.
     *
     * @return True if the object has been modified.
     */
    public boolean isModified()
    {
        return modified;
    }

    /**
     * Sets whether the object has been modified.
     *
     * @param modified true if the object has been modified, false otherwise.
     */
    public void setModified(boolean modified)
    {
        this.modified = modified;
    }

    /**
     * Sets the modified state for the object to be false.
     */
    public void resetModified()
    {
        modified = false;
    }


    /**
     * Returns whether this object is currently saving.
     *
     * @return true if this object is currently saving, false otherwise.
     */
    public boolean isSaving()
    {
        return saving;
    }

    /**
     * Sets whether this object is currently saving.
     *
     * @param saving true if this object is currently saving, false otherwise.
     */
    public void setSaving(boolean saving)
    {
        this.saving = saving;
    }


    /**
     * Returns whether this object is currently being loaded from the database.
     *
     * @return true if this object is currently loading, false otherwise.
     */
    public boolean isLoading()
    {
        return loading;
    }

    /**
     * Sets whether this object is currently being loaded from the database.
     *
     * @param loading true if this object is currently loading, false otherwise.
     */
    public void setLoading(boolean loading)
    {
        this.loading = loading;
    }


    /**
     * Returns whether this object was deleted from the database.
     * Note that this getter does not automatically reflect database state,
     * it will be set to true by Torque if doDelete() was called with this 
     * object. Bulk deletes and deletes via primary key do not change
     * this flag. Also, if doDelete() was called on an object which does
     * not exist in the database, the deleted flag is set to true even if
     * it was not deleted.
     *
     * @return true if this object was deleted, false otherwise.
     */
    public boolean isDeleted()
    {
        return deleted;
    }

    /**
     * Sets whether this object was deleted from the database.
     *
     * @param deleted true if this object was deleted, false otherwise.
     */
    public void setDeleted(boolean deleted)
    {
        this.deleted = deleted;
    }




    /**
     * Initializes the cache collClientes for referenced objects.
     * This, means, if collClientes is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collClientes, not null.
     */
    public List<Cliente> initClientes()
    {
        if (collClientes == null)
        {
            collClientes = new ArrayList<Cliente>();
        }
        return collClientes;
    }

    /**
     * Checks whether the cache collClientes for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isClientesInitialized()
    {
        return (collClientes != null);
    }


    /**
     * Method called to associate a Cliente object to this object
     * through the collClientes foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addCliente(Cliente toAdd)
        throws TorqueException
    {
        toAdd.setUtente((Utente) this);
        getClientes().add(toAdd);
    }

    /**
     * Method called to associate a Cliente object to this object
     * through the collClientes foreign key attribute using connection.
     *
     * @param l Cliente
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addCliente(Cliente l, Connection con) throws TorqueException
    {
        getClientes(con).add(l);
        l.setUtente((Utente) this);
    }
    
    /**
     * Method called to reset the cache of Cliente objects
     * which are related through the collClientes foreign key attribute.
     */
    public void resetCliente()
    {
        collClientes = null;
    }


    /**
     * The criteria used to select the current contents of collClientes
     */
    private Criteria lastClienteCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Cliente> getClientes()
        throws TorqueException
    {
        if (collClientes == null)
        {
            collClientes = getClientes(new Criteria());
            for (Cliente cliente : collClientes)
            {
                cliente.setUtente((Utente) this);
            }
        }
        return collClientes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve related collClientes from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Cliente> getClientes(Criteria criteria) throws TorqueException
    {
        if (collClientes == null)
        {
            if (isNew())
            {
               initClientes();
            }
            else
            {
                criteria.and(com.opcal.ClientePeer.EMAIL, getEmail());
                collClientes = com.opcal.ClientePeer.doSelect(criteria);
                for (Cliente cliente : collClientes)
                {
                    cliente.setUtente((Utente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.ClientePeer.EMAIL, getEmail());
                if (lastClienteCriteria == null
                        || !lastClienteCriteria.equals(criteria))
                {
                    collClientes = com.opcal.ClientePeer.doSelect(criteria);
                    for (Cliente cliente : collClientes)
                    {
                        cliente.setUtente((Utente) this);
                    }
                }
            }
        }
        lastClienteCriteria = criteria;
        return collClientes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getClientes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Cliente> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Cliente> getClientes(Connection con) throws TorqueException
    {
        if (collClientes == null)
        {
            collClientes = getClientes(new Criteria(), con);
            for (Cliente cliente : collClientes)
            {
                cliente.setUtente((Utente) this);
            }
        }
        return collClientes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve the related Cliente Objects
     * from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Cliente> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Cliente> getClientes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collClientes == null)
        {
            if (isNew())
            {
               initClientes();
            }
            else
            {
                criteria.and(com.opcal.ClientePeer.EMAIL, getEmail());
                collClientes = com.opcal.ClientePeer.doSelect(criteria, con);
                for (Cliente cliente : collClientes)
                {
                    cliente.setUtente((Utente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.ClientePeer.EMAIL, getEmail());
                if (lastClienteCriteria == null
                        || !lastClienteCriteria.equals(criteria))
                {
                    collClientes = com.opcal.ClientePeer.doSelect(criteria, con);
                    for (Cliente cliente : collClientes)
                    {
                        cliente.setUtente((Utente) this);
                    }
                }
            }
        }
        lastClienteCriteria = criteria;

        return collClientes;
    }

    /**
     * Initializes the cache collAmministratores for referenced objects.
     * This, means, if collAmministratores is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collAmministratores, not null.
     */
    public List<Amministratore> initAmministratores()
    {
        if (collAmministratores == null)
        {
            collAmministratores = new ArrayList<Amministratore>();
        }
        return collAmministratores;
    }

    /**
     * Checks whether the cache collAmministratores for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isAmministratoresInitialized()
    {
        return (collAmministratores != null);
    }


    /**
     * Method called to associate a Amministratore object to this object
     * through the collAmministratores foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addAmministratore(Amministratore toAdd)
        throws TorqueException
    {
        toAdd.setUtente((Utente) this);
        getAmministratores().add(toAdd);
    }

    /**
     * Method called to associate a Amministratore object to this object
     * through the collAmministratores foreign key attribute using connection.
     *
     * @param l Amministratore
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addAmministratore(Amministratore l, Connection con) throws TorqueException
    {
        getAmministratores(con).add(l);
        l.setUtente((Utente) this);
    }
    
    /**
     * Method called to reset the cache of Amministratore objects
     * which are related through the collAmministratores foreign key attribute.
     */
    public void resetAmministratore()
    {
        collAmministratores = null;
    }


    /**
     * The criteria used to select the current contents of collAmministratores
     */
    private Criteria lastAmministratoreCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getAmministratores(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Amministratore> getAmministratores()
        throws TorqueException
    {
        if (collAmministratores == null)
        {
            collAmministratores = getAmministratores(new Criteria());
            for (Amministratore amministratore : collAmministratores)
            {
                amministratore.setUtente((Utente) this);
            }
        }
        return collAmministratores;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve related collAmministratores from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Amministratore> getAmministratores(Criteria criteria) throws TorqueException
    {
        if (collAmministratores == null)
        {
            if (isNew())
            {
               initAmministratores();
            }
            else
            {
                criteria.and(com.opcal.AmministratorePeer.EMAIL, getEmail());
                collAmministratores = com.opcal.AmministratorePeer.doSelect(criteria);
                for (Amministratore amministratore : collAmministratores)
                {
                    amministratore.setUtente((Utente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.AmministratorePeer.EMAIL, getEmail());
                if (lastAmministratoreCriteria == null
                        || !lastAmministratoreCriteria.equals(criteria))
                {
                    collAmministratores = com.opcal.AmministratorePeer.doSelect(criteria);
                    for (Amministratore amministratore : collAmministratores)
                    {
                        amministratore.setUtente((Utente) this);
                    }
                }
            }
        }
        lastAmministratoreCriteria = criteria;
        return collAmministratores;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getAmministratores(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Amministratore> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Amministratore> getAmministratores(Connection con) throws TorqueException
    {
        if (collAmministratores == null)
        {
            collAmministratores = getAmministratores(new Criteria(), con);
            for (Amministratore amministratore : collAmministratores)
            {
                amministratore.setUtente((Utente) this);
            }
        }
        return collAmministratores;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve the related Amministratore Objects
     * from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Amministratore> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Amministratore> getAmministratores(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collAmministratores == null)
        {
            if (isNew())
            {
               initAmministratores();
            }
            else
            {
                criteria.and(com.opcal.AmministratorePeer.EMAIL, getEmail());
                collAmministratores = com.opcal.AmministratorePeer.doSelect(criteria, con);
                for (Amministratore amministratore : collAmministratores)
                {
                    amministratore.setUtente((Utente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.AmministratorePeer.EMAIL, getEmail());
                if (lastAmministratoreCriteria == null
                        || !lastAmministratoreCriteria.equals(criteria))
                {
                    collAmministratores = com.opcal.AmministratorePeer.doSelect(criteria, con);
                    for (Amministratore amministratore : collAmministratores)
                    {
                        amministratore.setUtente((Utente) this);
                    }
                }
            }
        }
        lastAmministratoreCriteria = criteria;

        return collAmministratores;
    }

    /**
     * Initializes the cache collDipendentes for referenced objects.
     * This, means, if collDipendentes is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collDipendentes, not null.
     */
    public List<Dipendente> initDipendentes()
    {
        if (collDipendentes == null)
        {
            collDipendentes = new ArrayList<Dipendente>();
        }
        return collDipendentes;
    }

    /**
     * Checks whether the cache collDipendentes for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isDipendentesInitialized()
    {
        return (collDipendentes != null);
    }


    /**
     * Method called to associate a Dipendente object to this object
     * through the collDipendentes foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addDipendente(Dipendente toAdd)
        throws TorqueException
    {
        toAdd.setUtente((Utente) this);
        getDipendentes().add(toAdd);
    }

    /**
     * Method called to associate a Dipendente object to this object
     * through the collDipendentes foreign key attribute using connection.
     *
     * @param l Dipendente
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addDipendente(Dipendente l, Connection con) throws TorqueException
    {
        getDipendentes(con).add(l);
        l.setUtente((Utente) this);
    }
    
    /**
     * Method called to reset the cache of Dipendente objects
     * which are related through the collDipendentes foreign key attribute.
     */
    public void resetDipendente()
    {
        collDipendentes = null;
    }


    /**
     * The criteria used to select the current contents of collDipendentes
     */
    private Criteria lastDipendenteCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDipendentes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Dipendente> getDipendentes()
        throws TorqueException
    {
        if (collDipendentes == null)
        {
            collDipendentes = getDipendentes(new Criteria());
            for (Dipendente dipendente : collDipendentes)
            {
                dipendente.setUtente((Utente) this);
            }
        }
        return collDipendentes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve related collDipendentes from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Dipendente> getDipendentes(Criteria criteria) throws TorqueException
    {
        if (collDipendentes == null)
        {
            if (isNew())
            {
               initDipendentes();
            }
            else
            {
                criteria.and(com.opcal.DipendentePeer.EMAIL, getEmail());
                collDipendentes = com.opcal.DipendentePeer.doSelect(criteria);
                for (Dipendente dipendente : collDipendentes)
                {
                    dipendente.setUtente((Utente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.DipendentePeer.EMAIL, getEmail());
                if (lastDipendenteCriteria == null
                        || !lastDipendenteCriteria.equals(criteria))
                {
                    collDipendentes = com.opcal.DipendentePeer.doSelect(criteria);
                    for (Dipendente dipendente : collDipendentes)
                    {
                        dipendente.setUtente((Utente) this);
                    }
                }
            }
        }
        lastDipendenteCriteria = criteria;
        return collDipendentes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDipendentes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Dipendente> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Dipendente> getDipendentes(Connection con) throws TorqueException
    {
        if (collDipendentes == null)
        {
            collDipendentes = getDipendentes(new Criteria(), con);
            for (Dipendente dipendente : collDipendentes)
            {
                dipendente.setUtente((Utente) this);
            }
        }
        return collDipendentes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseUtente has previously
     * been saved, it will retrieve the related Dipendente Objects
     * from storage.
     * If this BaseUtente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Dipendente> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Dipendente> getDipendentes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDipendentes == null)
        {
            if (isNew())
            {
               initDipendentes();
            }
            else
            {
                criteria.and(com.opcal.DipendentePeer.EMAIL, getEmail());
                collDipendentes = com.opcal.DipendentePeer.doSelect(criteria, con);
                for (Dipendente dipendente : collDipendentes)
                {
                    dipendente.setUtente((Utente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.DipendentePeer.EMAIL, getEmail());
                if (lastDipendenteCriteria == null
                        || !lastDipendenteCriteria.equals(criteria))
                {
                    collDipendentes = com.opcal.DipendentePeer.doSelect(criteria, con);
                    for (Dipendente dipendente : collDipendentes)
                    {
                        dipendente.setUtente((Utente) this);
                    }
                }
            }
        }
        lastDipendenteCriteria = criteria;

        return collDipendentes;
    }




    private static final List<String> FIELD_NAMES;

    static
    {
        List<String> fieldNames
                = new ArrayList<String>();
        fieldNames.add("Email");
        fieldNames.add("Nome");
        fieldNames.add("Password");
        fieldNames.add("Cognome");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static List<String> getFieldNames()
    {
        return FIELD_NAMES;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Email"))
        {
            return getEmail();
        }
        if (name.equals("Nome"))
        {
            return getNome();
        }
        if (name.equals("Password"))
        {
            return getPassword();
        }
        if (name.equals("Cognome"))
        {
            return getCognome();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Email"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEmail((String) value);
            return true;
        }
        if (name.equals("Nome"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNome((String) value);
            return true;
        }
        if (name.equals("Password"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setPassword((String) value);
            return true;
        }
        if (name.equals("Cognome"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCognome((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (com.opcal.UtentePeer.EMAIL.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.EMAIL.getColumnName().equals(name))
        {
            return getEmail();
        }
        if (com.opcal.UtentePeer.NOME.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.NOME.getColumnName().equals(name))
        {
            return getNome();
        }
        if (com.opcal.UtentePeer.PASSWORD.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.PASSWORD.getColumnName().equals(name))
        {
            return getPassword();
        }
        if (com.opcal.UtentePeer.COGNOME.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.COGNOME.getColumnName().equals(name))
        {
            return getCognome();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (com.opcal.UtentePeer.EMAIL.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.EMAIL.getColumnName().equals(name))
        {
            return setByName("Email", value);
        }
        if (com.opcal.UtentePeer.NOME.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.NOME.getColumnName().equals(name))
        {
            return setByName("Nome", value);
        }
        if (com.opcal.UtentePeer.PASSWORD.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.PASSWORD.getColumnName().equals(name))
        {
            return setByName("Password", value);
        }
        if (com.opcal.UtentePeer.COGNOME.getSqlExpression().equals(name)
            || com.opcal.UtentePeer.COGNOME.getColumnName().equals(name))
        {
            return setByName("Cognome", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getEmail();
        }
        if (pos == 1)
        {
            return getNome();
        }
        if (pos == 2)
        {
            return getPassword();
        }
        if (pos == 3)
        {
            return getCognome();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Email", value);
        }
        if (position == 1)
        {
            return setByName("Nome", value);
        }
        if (position == 2)
        {
            return setByName("Password", value);
        }
        if (position == 3)
        {
            return setByName("Cognome", value);
        }
        return false;
    }



    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save() throws TorqueException
    {
        save(UtentePeer.DATABASE_NAME);
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @param dbName the name of the database to which the object
     *        should be saved.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(String dbName) 
            throws TorqueException
    {
        try (TorqueConnection con = Transaction.begin(dbName))
        {
            save(con);
            Transaction.commit(con);
        }
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally.
     *
     * @param con the connection to use for saving the object, not null.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(Connection con) 
            throws TorqueException
    {
        if (isSaving())
        {
            return;
        }
        try
        {
            setSaving(true);
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    UtentePeer.doInsert((Utente) this, con);
                    setNew(false);
                }
                else
                {
                    UtentePeer.doUpdate((Utente) this, con);
                }
            }

            if (isClientesInitialized())
            {
                for (Cliente collClientes : getClientes())
                {
                    collClientes.save(con);
                }
            }
            if (isAmministratoresInitialized())
            {
                for (Amministratore collAmministratores : getAmministratores())
                {
                    collAmministratores.save(con);
                }
            }
            if (isDipendentesInitialized())
            {
                for (Dipendente collDipendentes : getDipendentes())
                {
                    collDipendentes.save(con);
                }
            }
        }
        finally
        {
            setSaving(false);
        }
    }




    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key email ObjectKey
     */
    public void setPrimaryKey(ObjectKey<?> key)
        
    {
        setEmail(key.toString());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key the primary key to set.
     */
    public void setPrimaryKey(String key) 
    {
        setEmail(key);
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey<?> getPrimaryKey()
    {
        return SimpleKey.keyFor(getEmail());
    }



    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     * @throws TorqueException if retrieval of the associated objects fails  
     */
    public Utente copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using a connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails     
     */
    public Utente copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Utente copy(boolean deepcopy) throws TorqueException
    {
        Utente utente = new Utente();

        return copyInto(utente, deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Utente copy(boolean deepcopy, Connection con) throws TorqueException
    {
        Utente utente = new Utente();

        return copyInto(utente, deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Utente copyInto(Utente copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Utente copyInto(Utente copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    protected Utente copyInto(Utente copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setEmail((String) null);
        copyObj.setNome(nome);
        copyObj.setPassword(password);
        copyObj.setCognome(cognome);

        if (deepcopy)
        {
            if (collClientes != null)
            {
                for (Cliente obj : collClientes)
                {
                    copyObj.addCliente(obj.copy());
                }
            }
            else
            {
                copyObj.collClientes = null;
            }
            if (collAmministratores != null)
            {
                for (Amministratore obj : collAmministratores)
                {
                    copyObj.addAmministratore(obj.copy());
                }
            }
            else
            {
                copyObj.collAmministratores = null;
            }
            if (collDipendentes != null)
            {
                for (Dipendente obj : collDipendentes)
                {
                    copyObj.addDipendente(obj.copy());
                }
            }
            else
            {
                copyObj.collDipendentes = null;
            }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Utente copyInto(Utente copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setEmail((String) null);
        copyObj.setNome(nome);
        copyObj.setPassword(password);
        copyObj.setCognome(cognome);

        if (deepcopy)
        {
            for (Cliente obj : getClientes(con))
            {
                copyObj.addCliente(obj.copy());
            }
            for (Amministratore obj : getAmministratores(con))
            {
                copyObj.addAmministratore(obj.copy());
            }
            for (Dipendente obj : getDipendentes(con))
            {
                copyObj.addDipendente(obj.copy());
            }
        }
        return copyObj;
    }

    /** The Peer class */
    private static final com.opcal.UtentePeer peer
            = new com.opcal.UtentePeer();

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public com.opcal.UtentePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     * @throws TorqueException if associated objects are not found
     */
    public TableMap getTableMap() throws TorqueException
    {
        return com.opcal.UtentePeer.getTableMap();
    }



    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Utente:\n");
        str.append("email = ")
           .append(getEmail())
           .append("\n");
        str.append("nome = ")
           .append(getNome())
           .append("\n");
        str.append("password = ")
           .append(getPassword())
           .append("\n");
        str.append("cognome = ")
           .append(getCognome())
           .append("\n");
        return(str.toString());
    }

    /**
     * Compares the primary key of this instance with the key of another.
     *
     * @param toCompare The object to compare to.
     * @return Whether the primary keys are equal and the object have the
     *         same class.
     */
    public boolean equals(Object toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!getClass().equals(toCompare.getClass()))
        {
            return false;
        }
        Utente other = (Utente) toCompare;
        if (getPrimaryKey() == null || other.getPrimaryKey() == null)
        {
            return false;
        }
        return getPrimaryKey().equals(other.getPrimaryKey());
    }

    /**
     * If the primary key is not <code>null</code>, return the hashcode of the
     * primary key.  Otherwise calls <code>Object.hashCode()</code>.
     *
     * @return an <code>int</code> value
     */
    public int hashCode()
    {
        ObjectKey<?> ok = getPrimaryKey();
        if (ok == null)
        {
            return super.hashCode();
        }

        return ok.hashCode();
    }



    /**
     * Compares the content of this object to another object
     *
     * @param toCompare The object to compare to.
     * @return true if all of the columns in the other object have 
     *         the same value as the objects in this class.
     */
    public boolean valueEquals(Utente toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!Objects.equals(this.email, toCompare.getEmail()))
        {
            return false;
        }
        if (!Objects.equals(this.nome, toCompare.getNome()))
        {
            return false;
        }
        if (!Objects.equals(this.password, toCompare.getPassword()))
        {
            return false;
        }
        if (!Objects.equals(this.cognome, toCompare.getCognome()))
        {
            return false;
        }
        return true;
    }



}
