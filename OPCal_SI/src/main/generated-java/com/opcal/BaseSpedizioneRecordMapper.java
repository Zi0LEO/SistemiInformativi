package com.opcal;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.Column;
import org.apache.torque.TorqueException;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.om.mapper.RecordMapper;


/**
 * Maps ResultSet rows into Spedizione objects.
 *
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Mar 13 14:45:23 CET 2025]
 *
 */
@SuppressWarnings("unused")
public class BaseSpedizioneRecordMapper implements RecordMapper<Spedizione>
{
    /** Serial version */
    private static final long serialVersionUID = 1741873523105L;

    /** The class log. */
    private static Log log
            = LogFactory.getLog(BaseSpedizioneRecordMapper.class);

    /**
     * Constructs the object from the current row in the resultSet.
     *
     * @param resultSet the resultSet to operate on, already pointing
     *        to the correct row. Not null.
     * @param offset a possible offset in the columns to be considered
     *        (if previous columns contain other objects),
     *        or 0 for no offset.
     * @param criteria The criteria which created the result set.
     *        If set, the attributes to set in the data object
     *        are determined from the select columns in the criteria;
     *        if no matching column can be found, null is returned.
     *        If not set, all of the table's columns are read from the
     *        result set in the order defined in the table definition.
     *
     * @return the mapped object, not null.
     *
     * @throws TorqueException when reading fields from the RecordSet fails
     *         or if a Criteria is passed which contains select columns other
     *         than the columns in the spedizione table.
     */
    public Spedizione processRow(
                ResultSet resultSet,
                int offset,
                Criteria criteria)
            throws TorqueException
    {
        Spedizione spedizione = new Spedizione();

        try 
        {
            spedizione.setLoading(true);
            if (criteria == null)
            {
                spedizione.setCodice(
                        getCodice(resultSet, offset + 1));
                spedizione.setPeso(
                        getPeso(resultSet, offset + 2));
                spedizione.setPrezzo(
                        getPrezzo(resultSet, offset + 3));
                spedizione.setEmailMittente(
                        getEmailMittente(resultSet, offset + 4));
                spedizione.setEmailDestinatario(
                        getEmailDestinatario(resultSet, offset + 5));
                spedizione.setIvaCorriere(
                        getIvaCorriere(resultSet, offset + 6));
            }
            else
            {
                // try to get columns to be mapped
                // from criteria's select columns
                boolean columnMapped = false;
                int totalOffset = offset + 1;
                List<Column> selectColumns = criteria.getSelectColumns();
                List<Column> columnsWithoutOffset = selectColumns.subList(
                        offset, 
                        selectColumns.size());
                for (Column column : columnsWithoutOffset)
                {
                    if (BaseSpedizionePeer.CODICE.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setCodice(
                            getCodice(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseSpedizionePeer.PESO.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setPeso(
                            getPeso(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseSpedizionePeer.PREZZO.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setPrezzo(
                            getPrezzo(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseSpedizionePeer.EMAIL_MITTENTE.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setEmailMittente(
                            getEmailMittente(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseSpedizionePeer.EMAIL_DESTINATARIO.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setEmailDestinatario(
                            getEmailDestinatario(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseSpedizionePeer.IVA_CORRIERE.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        spedizione.setIvaCorriere(
                            getIvaCorriere(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    totalOffset++;
                }
                if (!columnMapped)
                {
                    log.debug("no columns to map found in criteria, "
                        + "returning null");
                    return null;
                }
            }
            spedizione.setNew(false);
            spedizione.setModified(false);
        }
        finally
        {
            spedizione.setLoading(false);
        }
        return spedizione;
    }

    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field codice in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected String getCodice(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getString(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }
    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field peso in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected int getPeso(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getInt(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }
    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field prezzo in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected int getPrezzo(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getInt(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }
    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field emailMittente in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected String getEmailMittente(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getString(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }
    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field emailDestinatario in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected String getEmailDestinatario(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getString(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }
    /**
     * Reads the value of the <code>columnIndex</code>'th column
     * in the <code>resultSet</code> so that it can be used to set
     * the field ivaCorriere in Spedizione.
     *
     * @param resultSet the ResultSet to read from, not null.
     * @param columnIndex the index in the resultSet which should be read.
     *
     * @return the content of the column.
     *
     * @throws SQLException if a problem occurs when reading
     *         from the resultSet.
     */
    protected String getIvaCorriere(
                ResultSet resultSet,
                int columnIndex)
            throws TorqueException
    {
        try
        {
            return resultSet.getString(columnIndex);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
    }

}
