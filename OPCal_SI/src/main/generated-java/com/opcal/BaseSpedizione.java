package com.opcal;

import java.io.Serializable;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ColumnAccessByName;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.util.TorqueConnection;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 13 14:45:21 CET 2025]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to Spedizione
 */
@SuppressWarnings("unused")
public abstract class BaseSpedizione 
    implements Persistent, Serializable, ColumnAccessByName
{
    /** Serial version */
    private static final long serialVersionUID = 1741873521381L;



    /** Codice della spedizione */
    private String codice = null;

    /** Peso della spedizione */
    private int peso = 0;

    /** Prezzo della spedizione */
    private int prezzo = 0;

    /** Mittente */
    private String emailMittente = null;

    /** Destinatario */
    private String emailDestinatario = null;

    /** Il corriere che si è occupato della spedizione */
    private String ivaCorriere = null;

    /** Whether this object was modified after loading or after last save. */
    private boolean modified = true;

    /** 
     * Whether this object was loaded from the database or already saved 
     * (false) or whether it is not yet in the database(true).
     */
    private boolean isNew = true;

    /** Flag which indicates whether this object is currently saving. */
    private boolean saving = false;

    /** 
     * Flag which indicates whether this object is currently loaded
     * from the database. 
     */
    private boolean loading = false;

    /** 
     * Flag which indicates whether this object was deleted from the database.
     * Note that this flags does not always display the current database state,
     * there is no magical connection between this flag and the database.
     */
    private boolean deleted = false;

    /** Defines the aCorriere field. */
    private Corriere aCorriere = null;

    /** Defines the aClienteRelatedByEmailMittente field. */
    private Cliente aClienteRelatedByEmailMittente = null;

    /** Defines the aClienteRelatedByEmailDestinatario field. */
    private Cliente aClienteRelatedByEmailDestinatario = null;



    /** Defines the collRicevutas field. */
    protected List<Ricevuta> collRicevutas = null;

    /** Defines the collPrenotatas field. */
    protected List<Prenotata> collPrenotatas = null;

    /** Defines the collInCorsos field. */
    protected List<InCorso> collInCorsos = null;

    /** Defines the collEffettuatas field. */
    protected List<Effettuata> collEffettuatas = null;

    /** Defines the collResos field. */
    protected List<Reso> collResos = null;



    /**
     * Get the value of codice.
     * The field is described as follows: 
     * Codice della spedizione
     *
     * @return the value of codice as String
     */
    public String getCodice() 
    {
        
        return codice;
    }

    /**
     * Set the value of codice.
     * The field is described as follows: 
     * Codice della spedizione
     *
     * @param v new value of codice
     */
    public void setCodice(String v)
    {
        if (!Objects.equals(this.codice, v))
        {
            setModified(true);
        }

        this.codice = v;

        // update associated objects in collRicevutas 
        if (collRicevutas != null)
        {
            for (Ricevuta element : collRicevutas)
            {
                element.setCodice(v);
            }
        }
        // update associated objects in collPrenotatas 
        if (collPrenotatas != null)
        {
            for (Prenotata element : collPrenotatas)
            {
                element.setCodice(v);
            }
        }
        // update associated objects in collInCorsos 
        if (collInCorsos != null)
        {
            for (InCorso element : collInCorsos)
            {
                element.setCodice(v);
            }
        }
        // update associated objects in collEffettuatas 
        if (collEffettuatas != null)
        {
            for (Effettuata element : collEffettuatas)
            {
                element.setCodice(v);
            }
        }
        // update associated objects in collResos 
        if (collResos != null)
        {
            for (Reso element : collResos)
            {
                element.setCodice(v);
            }
        }

    }
    
    /**
     * Get the value of peso.
     * The field is described as follows: 
     * Peso della spedizione
     *
     * @return the value of peso as int
     */
    public int getPeso() 
    {
        
        return peso;
    }

    /**
     * Set the value of peso.
     * The field is described as follows: 
     * Peso della spedizione
     *
     * @param v new value of peso
     */
    public void setPeso(int v)
    {
        if (this.peso != v)
        {
            setModified(true);
        }

        this.peso = v;


    }
    
    /**
     * Get the value of prezzo.
     * The field is described as follows: 
     * Prezzo della spedizione
     *
     * @return the value of prezzo as int
     */
    public int getPrezzo() 
    {
        
        return prezzo;
    }

    /**
     * Set the value of prezzo.
     * The field is described as follows: 
     * Prezzo della spedizione
     *
     * @param v new value of prezzo
     */
    public void setPrezzo(int v)
    {
        if (this.prezzo != v)
        {
            setModified(true);
        }

        this.prezzo = v;


    }
    
    /**
     * Get the value of emailMittente.
     * The field is described as follows: 
     * Mittente
     *
     * @return the value of emailMittente as String
     */
    public String getEmailMittente() 
    {
        
        return emailMittente;
    }

    /**
     * Set the value of emailMittente.
     * The field is described as follows: 
     * Mittente
     *
     * @param v new value of emailMittente
     */
    public void setEmailMittente(String v)
    {
        if (!Objects.equals(this.emailMittente, v))
        {
            setModified(true);
        }

        this.emailMittente = v;
        if (aClienteRelatedByEmailMittente != null && !Objects.equals(aClienteRelatedByEmailMittente.getEmail(), v))
        {
            aClienteRelatedByEmailMittente = null;
        }


    }
    
    /**
     * Get the value of emailDestinatario.
     * The field is described as follows: 
     * Destinatario
     *
     * @return the value of emailDestinatario as String
     */
    public String getEmailDestinatario() 
    {
        
        return emailDestinatario;
    }

    /**
     * Set the value of emailDestinatario.
     * The field is described as follows: 
     * Destinatario
     *
     * @param v new value of emailDestinatario
     */
    public void setEmailDestinatario(String v)
    {
        if (!Objects.equals(this.emailDestinatario, v))
        {
            setModified(true);
        }

        this.emailDestinatario = v;
        if (aClienteRelatedByEmailDestinatario != null && !Objects.equals(aClienteRelatedByEmailDestinatario.getEmail(), v))
        {
            aClienteRelatedByEmailDestinatario = null;
        }


    }
    
    /**
     * Get the value of ivaCorriere.
     * The field is described as follows: 
     * Il corriere che si è occupato della spedizione
     *
     * @return the value of ivaCorriere as String
     */
    public String getIvaCorriere() 
    {
        
        return ivaCorriere;
    }

    /**
     * Set the value of ivaCorriere.
     * The field is described as follows: 
     * Il corriere che si è occupato della spedizione
     *
     * @param v new value of ivaCorriere
     */
    public void setIvaCorriere(String v)
    {
        if (!Objects.equals(this.ivaCorriere, v))
        {
            setModified(true);
        }

        this.ivaCorriere = v;
        if (aCorriere != null && !Objects.equals(aCorriere.getIva(), v))
        {
            aCorriere = null;
        }


    }
    

    /**
     * Returns whether the object has ever been saved.  This will
     * be false, if the object was retrieved from storage or was created
     * and then saved.
     *
     * @return true, if the object has never been persisted.
     */
    public boolean isNew()
    {
        return isNew;
    }

    /**
     * Sets whether the object has ever been saved.
     *
     * @param isNew true if the object has never been saved, false otherwise.
     */
    public void setNew(boolean isNew)
    {
        this.isNew = isNew;
    }

    /**
     * Returns whether the object has been modified.
     *
     * @return True if the object has been modified.
     */
    public boolean isModified()
    {
        return modified;
    }

    /**
     * Sets whether the object has been modified.
     *
     * @param modified true if the object has been modified, false otherwise.
     */
    public void setModified(boolean modified)
    {
        this.modified = modified;
    }

    /**
     * Sets the modified state for the object to be false.
     */
    public void resetModified()
    {
        modified = false;
    }


    /**
     * Returns whether this object is currently saving.
     *
     * @return true if this object is currently saving, false otherwise.
     */
    public boolean isSaving()
    {
        return saving;
    }

    /**
     * Sets whether this object is currently saving.
     *
     * @param saving true if this object is currently saving, false otherwise.
     */
    public void setSaving(boolean saving)
    {
        this.saving = saving;
    }


    /**
     * Returns whether this object is currently being loaded from the database.
     *
     * @return true if this object is currently loading, false otherwise.
     */
    public boolean isLoading()
    {
        return loading;
    }

    /**
     * Sets whether this object is currently being loaded from the database.
     *
     * @param loading true if this object is currently loading, false otherwise.
     */
    public void setLoading(boolean loading)
    {
        this.loading = loading;
    }


    /**
     * Returns whether this object was deleted from the database.
     * Note that this getter does not automatically reflect database state,
     * it will be set to true by Torque if doDelete() was called with this 
     * object. Bulk deletes and deletes via primary key do not change
     * this flag. Also, if doDelete() was called on an object which does
     * not exist in the database, the deleted flag is set to true even if
     * it was not deleted.
     *
     * @return true if this object was deleted, false otherwise.
     */
    public boolean isDeleted()
    {
        return deleted;
    }

    /**
     * Sets whether this object was deleted from the database.
     *
     * @param deleted true if this object was deleted, false otherwise.
     */
    public void setDeleted(boolean deleted)
    {
        this.deleted = deleted;
    }


    /**
     * Returns the associated Corriere object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Corriere object
     * @throws TorqueException when reading from the database fails.
     */
    public Corriere getCorriere()
        throws TorqueException
    {
        if (aCorriere == null && !Objects.equals(this.ivaCorriere, null))
        {
            aCorriere = com.opcal.CorrierePeer.retrieveByPK(SimpleKey.keyFor(this.ivaCorriere));
        }
        return aCorriere;
    }

    /**
     * Return the associated Corriere object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Corriere object
     * @throws TorqueException If a problem occurs with the get[Corriere] method.
     */
    public Corriere getCorriere(Connection connection)
        throws TorqueException
    {
        if (aCorriere == null && !Objects.equals(this.ivaCorriere, null))
        {
            aCorriere = com.opcal.CorrierePeer.retrieveByPK(SimpleKey.keyFor(this.ivaCorriere), connection);
        }
        return aCorriere;
    }


    /**
     * Declares an association between this object and a Corriere object
     *
     * @param v Corriere
     */
    public void setCorriere(Corriere v)
    {
        if (v == null)
        {
            setIvaCorriere(null);
        }
        else
        {
            setIvaCorriere(v.getIva());
        }
        aCorriere = v;
    }
    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     * @param key the key to set
     * @throws TorqueException if associated objects are not found
     */
    public void setCorriereKey(ObjectKey<?> key) throws TorqueException
    {
       
        setIvaCorriere(key.toString());
     }

    /**
     * Returns the associated Cliente object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Cliente object
     * @throws TorqueException when reading from the database fails.
     */
    public Cliente getClienteRelatedByEmailMittente()
        throws TorqueException
    {
        if (aClienteRelatedByEmailMittente == null && !Objects.equals(this.emailMittente, null))
        {
            aClienteRelatedByEmailMittente = com.opcal.ClientePeer.retrieveByPK(SimpleKey.keyFor(this.emailMittente));
        }
        return aClienteRelatedByEmailMittente;
    }

    /**
     * Return the associated Cliente object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Cliente object
     * @throws TorqueException If a problem occurs with the get[Cliente] method.
     */
    public Cliente getClienteRelatedByEmailMittente(Connection connection)
        throws TorqueException
    {
        if (aClienteRelatedByEmailMittente == null && !Objects.equals(this.emailMittente, null))
        {
            aClienteRelatedByEmailMittente = com.opcal.ClientePeer.retrieveByPK(SimpleKey.keyFor(this.emailMittente), connection);
        }
        return aClienteRelatedByEmailMittente;
    }


    /**
     * Declares an association between this object and a Cliente object
     *
     * @param v Cliente
     */
    public void setClienteRelatedByEmailMittente(Cliente v)
    {
        if (v == null)
        {
            setEmailMittente(null);
        }
        else
        {
            setEmailMittente(v.getEmail());
        }
        aClienteRelatedByEmailMittente = v;
    }
    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     * @param key the key to set
     * @throws TorqueException if associated objects are not found
     */
    public void setClienteRelatedByEmailMittenteKey(ObjectKey<?> key) throws TorqueException
    {
       
        setEmailMittente(key.toString());
     }

    /**
     * Returns the associated Cliente object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Cliente object
     * @throws TorqueException when reading from the database fails.
     */
    public Cliente getClienteRelatedByEmailDestinatario()
        throws TorqueException
    {
        if (aClienteRelatedByEmailDestinatario == null && !Objects.equals(this.emailDestinatario, null))
        {
            aClienteRelatedByEmailDestinatario = com.opcal.ClientePeer.retrieveByPK(SimpleKey.keyFor(this.emailDestinatario));
        }
        return aClienteRelatedByEmailDestinatario;
    }

    /**
     * Return the associated Cliente object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Cliente object
     * @throws TorqueException If a problem occurs with the get[Cliente] method.
     */
    public Cliente getClienteRelatedByEmailDestinatario(Connection connection)
        throws TorqueException
    {
        if (aClienteRelatedByEmailDestinatario == null && !Objects.equals(this.emailDestinatario, null))
        {
            aClienteRelatedByEmailDestinatario = com.opcal.ClientePeer.retrieveByPK(SimpleKey.keyFor(this.emailDestinatario), connection);
        }
        return aClienteRelatedByEmailDestinatario;
    }


    /**
     * Declares an association between this object and a Cliente object
     *
     * @param v Cliente
     */
    public void setClienteRelatedByEmailDestinatario(Cliente v)
    {
        if (v == null)
        {
            setEmailDestinatario(null);
        }
        else
        {
            setEmailDestinatario(v.getEmail());
        }
        aClienteRelatedByEmailDestinatario = v;
    }
    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     * @param key the key to set
     * @throws TorqueException if associated objects are not found
     */
    public void setClienteRelatedByEmailDestinatarioKey(ObjectKey<?> key) throws TorqueException
    {
       
        setEmailDestinatario(key.toString());
     }



    /**
     * Initializes the cache collRicevutas for referenced objects.
     * This, means, if collRicevutas is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collRicevutas, not null.
     */
    public List<Ricevuta> initRicevutas()
    {
        if (collRicevutas == null)
        {
            collRicevutas = new ArrayList<Ricevuta>();
        }
        return collRicevutas;
    }

    /**
     * Checks whether the cache collRicevutas for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isRicevutasInitialized()
    {
        return (collRicevutas != null);
    }


    /**
     * Method called to associate a Ricevuta object to this object
     * through the collRicevutas foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addRicevuta(Ricevuta toAdd)
        throws TorqueException
    {
        toAdd.setSpedizione((Spedizione) this);
        getRicevutas().add(toAdd);
    }

    /**
     * Method called to associate a Ricevuta object to this object
     * through the collRicevutas foreign key attribute using connection.
     *
     * @param l Ricevuta
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addRicevuta(Ricevuta l, Connection con) throws TorqueException
    {
        getRicevutas(con).add(l);
        l.setSpedizione((Spedizione) this);
    }
    
    /**
     * Method called to reset the cache of Ricevuta objects
     * which are related through the collRicevutas foreign key attribute.
     */
    public void resetRicevuta()
    {
        collRicevutas = null;
    }


    /**
     * The criteria used to select the current contents of collRicevutas
     */
    private Criteria lastRicevutaCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRicevutas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Ricevuta> getRicevutas()
        throws TorqueException
    {
        if (collRicevutas == null)
        {
            collRicevutas = getRicevutas(new Criteria());
            for (Ricevuta ricevuta : collRicevutas)
            {
                ricevuta.setSpedizione((Spedizione) this);
            }
        }
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve related collRicevutas from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Ricevuta> getRicevutas(Criteria criteria) throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
               initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
                collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
                if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
                {
                    collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria);
                    for (Ricevuta ricevuta : collRicevutas)
                    {
                        ricevuta.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastRicevutaCriteria = criteria;
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRicevutas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Ricevuta> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Ricevuta> getRicevutas(Connection con) throws TorqueException
    {
        if (collRicevutas == null)
        {
            collRicevutas = getRicevutas(new Criteria(), con);
            for (Ricevuta ricevuta : collRicevutas)
            {
                ricevuta.setSpedizione((Spedizione) this);
            }
        }
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve the related Ricevuta Objects
     * from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Ricevuta> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Ricevuta> getRicevutas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
               initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
                collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria, con);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
                if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
                {
                    collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria, con);
                    for (Ricevuta ricevuta : collRicevutas)
                    {
                        ricevuta.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastRicevutaCriteria = criteria;

        return collRicevutas;
    }

    /**
     * Initializes the cache collPrenotatas for referenced objects.
     * This, means, if collPrenotatas is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collPrenotatas, not null.
     */
    public List<Prenotata> initPrenotatas()
    {
        if (collPrenotatas == null)
        {
            collPrenotatas = new ArrayList<Prenotata>();
        }
        return collPrenotatas;
    }

    /**
     * Checks whether the cache collPrenotatas for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isPrenotatasInitialized()
    {
        return (collPrenotatas != null);
    }


    /**
     * Method called to associate a Prenotata object to this object
     * through the collPrenotatas foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addPrenotata(Prenotata toAdd)
        throws TorqueException
    {
        toAdd.setSpedizione((Spedizione) this);
        getPrenotatas().add(toAdd);
    }

    /**
     * Method called to associate a Prenotata object to this object
     * through the collPrenotatas foreign key attribute using connection.
     *
     * @param l Prenotata
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addPrenotata(Prenotata l, Connection con) throws TorqueException
    {
        getPrenotatas(con).add(l);
        l.setSpedizione((Spedizione) this);
    }
    
    /**
     * Method called to reset the cache of Prenotata objects
     * which are related through the collPrenotatas foreign key attribute.
     */
    public void resetPrenotata()
    {
        collPrenotatas = null;
    }


    /**
     * The criteria used to select the current contents of collPrenotatas
     */
    private Criteria lastPrenotataCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrenotatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Prenotata> getPrenotatas()
        throws TorqueException
    {
        if (collPrenotatas == null)
        {
            collPrenotatas = getPrenotatas(new Criteria());
            for (Prenotata prenotata : collPrenotatas)
            {
                prenotata.setSpedizione((Spedizione) this);
            }
        }
        return collPrenotatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve related collPrenotatas from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Prenotata> getPrenotatas(Criteria criteria) throws TorqueException
    {
        if (collPrenotatas == null)
        {
            if (isNew())
            {
               initPrenotatas();
            }
            else
            {
                criteria.and(com.opcal.PrenotataPeer.CODICE, getCodice());
                collPrenotatas = com.opcal.PrenotataPeer.doSelect(criteria);
                for (Prenotata prenotata : collPrenotatas)
                {
                    prenotata.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.PrenotataPeer.CODICE, getCodice());
                if (lastPrenotataCriteria == null
                        || !lastPrenotataCriteria.equals(criteria))
                {
                    collPrenotatas = com.opcal.PrenotataPeer.doSelect(criteria);
                    for (Prenotata prenotata : collPrenotatas)
                    {
                        prenotata.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastPrenotataCriteria = criteria;
        return collPrenotatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrenotatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Prenotata> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Prenotata> getPrenotatas(Connection con) throws TorqueException
    {
        if (collPrenotatas == null)
        {
            collPrenotatas = getPrenotatas(new Criteria(), con);
            for (Prenotata prenotata : collPrenotatas)
            {
                prenotata.setSpedizione((Spedizione) this);
            }
        }
        return collPrenotatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve the related Prenotata Objects
     * from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Prenotata> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Prenotata> getPrenotatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPrenotatas == null)
        {
            if (isNew())
            {
               initPrenotatas();
            }
            else
            {
                criteria.and(com.opcal.PrenotataPeer.CODICE, getCodice());
                collPrenotatas = com.opcal.PrenotataPeer.doSelect(criteria, con);
                for (Prenotata prenotata : collPrenotatas)
                {
                    prenotata.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.PrenotataPeer.CODICE, getCodice());
                if (lastPrenotataCriteria == null
                        || !lastPrenotataCriteria.equals(criteria))
                {
                    collPrenotatas = com.opcal.PrenotataPeer.doSelect(criteria, con);
                    for (Prenotata prenotata : collPrenotatas)
                    {
                        prenotata.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastPrenotataCriteria = criteria;

        return collPrenotatas;
    }

    /**
     * Initializes the cache collInCorsos for referenced objects.
     * This, means, if collInCorsos is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collInCorsos, not null.
     */
    public List<InCorso> initInCorsos()
    {
        if (collInCorsos == null)
        {
            collInCorsos = new ArrayList<InCorso>();
        }
        return collInCorsos;
    }

    /**
     * Checks whether the cache collInCorsos for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isInCorsosInitialized()
    {
        return (collInCorsos != null);
    }


    /**
     * Method called to associate a InCorso object to this object
     * through the collInCorsos foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addInCorso(InCorso toAdd)
        throws TorqueException
    {
        toAdd.setSpedizione((Spedizione) this);
        getInCorsos().add(toAdd);
    }

    /**
     * Method called to associate a InCorso object to this object
     * through the collInCorsos foreign key attribute using connection.
     *
     * @param l InCorso
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addInCorso(InCorso l, Connection con) throws TorqueException
    {
        getInCorsos(con).add(l);
        l.setSpedizione((Spedizione) this);
    }
    
    /**
     * Method called to reset the cache of InCorso objects
     * which are related through the collInCorsos foreign key attribute.
     */
    public void resetInCorso()
    {
        collInCorsos = null;
    }


    /**
     * The criteria used to select the current contents of collInCorsos
     */
    private Criteria lastInCorsoCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInCorsos(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<InCorso> getInCorsos()
        throws TorqueException
    {
        if (collInCorsos == null)
        {
            collInCorsos = getInCorsos(new Criteria());
            for (InCorso inCorso : collInCorsos)
            {
                inCorso.setSpedizione((Spedizione) this);
            }
        }
        return collInCorsos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve related collInCorsos from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<InCorso> getInCorsos(Criteria criteria) throws TorqueException
    {
        if (collInCorsos == null)
        {
            if (isNew())
            {
               initInCorsos();
            }
            else
            {
                criteria.and(com.opcal.InCorsoPeer.CODICE, getCodice());
                collInCorsos = com.opcal.InCorsoPeer.doSelect(criteria);
                for (InCorso inCorso : collInCorsos)
                {
                    inCorso.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.InCorsoPeer.CODICE, getCodice());
                if (lastInCorsoCriteria == null
                        || !lastInCorsoCriteria.equals(criteria))
                {
                    collInCorsos = com.opcal.InCorsoPeer.doSelect(criteria);
                    for (InCorso inCorso : collInCorsos)
                    {
                        inCorso.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastInCorsoCriteria = criteria;
        return collInCorsos;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInCorsos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<InCorso> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<InCorso> getInCorsos(Connection con) throws TorqueException
    {
        if (collInCorsos == null)
        {
            collInCorsos = getInCorsos(new Criteria(), con);
            for (InCorso inCorso : collInCorsos)
            {
                inCorso.setSpedizione((Spedizione) this);
            }
        }
        return collInCorsos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve the related InCorso Objects
     * from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<InCorso> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<InCorso> getInCorsos(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collInCorsos == null)
        {
            if (isNew())
            {
               initInCorsos();
            }
            else
            {
                criteria.and(com.opcal.InCorsoPeer.CODICE, getCodice());
                collInCorsos = com.opcal.InCorsoPeer.doSelect(criteria, con);
                for (InCorso inCorso : collInCorsos)
                {
                    inCorso.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.InCorsoPeer.CODICE, getCodice());
                if (lastInCorsoCriteria == null
                        || !lastInCorsoCriteria.equals(criteria))
                {
                    collInCorsos = com.opcal.InCorsoPeer.doSelect(criteria, con);
                    for (InCorso inCorso : collInCorsos)
                    {
                        inCorso.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastInCorsoCriteria = criteria;

        return collInCorsos;
    }

    /**
     * Initializes the cache collEffettuatas for referenced objects.
     * This, means, if collEffettuatas is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collEffettuatas, not null.
     */
    public List<Effettuata> initEffettuatas()
    {
        if (collEffettuatas == null)
        {
            collEffettuatas = new ArrayList<Effettuata>();
        }
        return collEffettuatas;
    }

    /**
     * Checks whether the cache collEffettuatas for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isEffettuatasInitialized()
    {
        return (collEffettuatas != null);
    }


    /**
     * Method called to associate a Effettuata object to this object
     * through the collEffettuatas foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addEffettuata(Effettuata toAdd)
        throws TorqueException
    {
        toAdd.setSpedizione((Spedizione) this);
        getEffettuatas().add(toAdd);
    }

    /**
     * Method called to associate a Effettuata object to this object
     * through the collEffettuatas foreign key attribute using connection.
     *
     * @param l Effettuata
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addEffettuata(Effettuata l, Connection con) throws TorqueException
    {
        getEffettuatas(con).add(l);
        l.setSpedizione((Spedizione) this);
    }
    
    /**
     * Method called to reset the cache of Effettuata objects
     * which are related through the collEffettuatas foreign key attribute.
     */
    public void resetEffettuata()
    {
        collEffettuatas = null;
    }


    /**
     * The criteria used to select the current contents of collEffettuatas
     */
    private Criteria lastEffettuataCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEffettuatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Effettuata> getEffettuatas()
        throws TorqueException
    {
        if (collEffettuatas == null)
        {
            collEffettuatas = getEffettuatas(new Criteria());
            for (Effettuata effettuata : collEffettuatas)
            {
                effettuata.setSpedizione((Spedizione) this);
            }
        }
        return collEffettuatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve related collEffettuatas from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Effettuata> getEffettuatas(Criteria criteria) throws TorqueException
    {
        if (collEffettuatas == null)
        {
            if (isNew())
            {
               initEffettuatas();
            }
            else
            {
                criteria.and(com.opcal.EffettuataPeer.CODICE, getCodice());
                collEffettuatas = com.opcal.EffettuataPeer.doSelect(criteria);
                for (Effettuata effettuata : collEffettuatas)
                {
                    effettuata.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.EffettuataPeer.CODICE, getCodice());
                if (lastEffettuataCriteria == null
                        || !lastEffettuataCriteria.equals(criteria))
                {
                    collEffettuatas = com.opcal.EffettuataPeer.doSelect(criteria);
                    for (Effettuata effettuata : collEffettuatas)
                    {
                        effettuata.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastEffettuataCriteria = criteria;
        return collEffettuatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getEffettuatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Effettuata> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Effettuata> getEffettuatas(Connection con) throws TorqueException
    {
        if (collEffettuatas == null)
        {
            collEffettuatas = getEffettuatas(new Criteria(), con);
            for (Effettuata effettuata : collEffettuatas)
            {
                effettuata.setSpedizione((Spedizione) this);
            }
        }
        return collEffettuatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve the related Effettuata Objects
     * from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Effettuata> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Effettuata> getEffettuatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collEffettuatas == null)
        {
            if (isNew())
            {
               initEffettuatas();
            }
            else
            {
                criteria.and(com.opcal.EffettuataPeer.CODICE, getCodice());
                collEffettuatas = com.opcal.EffettuataPeer.doSelect(criteria, con);
                for (Effettuata effettuata : collEffettuatas)
                {
                    effettuata.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.EffettuataPeer.CODICE, getCodice());
                if (lastEffettuataCriteria == null
                        || !lastEffettuataCriteria.equals(criteria))
                {
                    collEffettuatas = com.opcal.EffettuataPeer.doSelect(criteria, con);
                    for (Effettuata effettuata : collEffettuatas)
                    {
                        effettuata.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastEffettuataCriteria = criteria;

        return collEffettuatas;
    }

    /**
     * Initializes the cache collResos for referenced objects.
     * This, means, if collResos is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collResos, not null.
     */
    public List<Reso> initResos()
    {
        if (collResos == null)
        {
            collResos = new ArrayList<Reso>();
        }
        return collResos;
    }

    /**
     * Checks whether the cache collResos for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isResosInitialized()
    {
        return (collResos != null);
    }


    /**
     * Method called to associate a Reso object to this object
     * through the collResos foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addReso(Reso toAdd)
        throws TorqueException
    {
        toAdd.setSpedizione((Spedizione) this);
        getResos().add(toAdd);
    }

    /**
     * Method called to associate a Reso object to this object
     * through the collResos foreign key attribute using connection.
     *
     * @param l Reso
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addReso(Reso l, Connection con) throws TorqueException
    {
        getResos(con).add(l);
        l.setSpedizione((Spedizione) this);
    }
    
    /**
     * Method called to reset the cache of Reso objects
     * which are related through the collResos foreign key attribute.
     */
    public void resetReso()
    {
        collResos = null;
    }


    /**
     * The criteria used to select the current contents of collResos
     */
    private Criteria lastResoCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getResos(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Reso> getResos()
        throws TorqueException
    {
        if (collResos == null)
        {
            collResos = getResos(new Criteria());
            for (Reso reso : collResos)
            {
                reso.setSpedizione((Spedizione) this);
            }
        }
        return collResos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve related collResos from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Reso> getResos(Criteria criteria) throws TorqueException
    {
        if (collResos == null)
        {
            if (isNew())
            {
               initResos();
            }
            else
            {
                criteria.and(com.opcal.ResoPeer.CODICE, getCodice());
                collResos = com.opcal.ResoPeer.doSelect(criteria);
                for (Reso reso : collResos)
                {
                    reso.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.ResoPeer.CODICE, getCodice());
                if (lastResoCriteria == null
                        || !lastResoCriteria.equals(criteria))
                {
                    collResos = com.opcal.ResoPeer.doSelect(criteria);
                    for (Reso reso : collResos)
                    {
                        reso.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastResoCriteria = criteria;
        return collResos;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getResos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Reso> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Reso> getResos(Connection con) throws TorqueException
    {
        if (collResos == null)
        {
            collResos = getResos(new Criteria(), con);
            for (Reso reso : collResos)
            {
                reso.setSpedizione((Spedizione) this);
            }
        }
        return collResos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione has previously
     * been saved, it will retrieve the related Reso Objects
     * from storage.
     * If this BaseSpedizione is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Reso> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Reso> getResos(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collResos == null)
        {
            if (isNew())
            {
               initResos();
            }
            else
            {
                criteria.and(com.opcal.ResoPeer.CODICE, getCodice());
                collResos = com.opcal.ResoPeer.doSelect(criteria, con);
                for (Reso reso : collResos)
                {
                    reso.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.ResoPeer.CODICE, getCodice());
                if (lastResoCriteria == null
                        || !lastResoCriteria.equals(criteria))
                {
                    collResos = com.opcal.ResoPeer.doSelect(criteria, con);
                    for (Reso reso : collResos)
                    {
                        reso.setSpedizione((Spedizione) this);
                    }
                }
            }
        }
        lastResoCriteria = criteria;

        return collResos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Ricevuta> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Ricevuta> getRicevutasJoinCliente(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Ricevuta> result = getRicevutasJoinCliente(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseSpedizione is new, it will return
     * an empty collection; or if this BaseSpedizione has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Ricevuta> getRicevutasJoinCliente(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
                initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
                collRicevutas = com.opcal.RicevutaPeer.doSelectJoinCliente(criteria, connection);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setSpedizione((Spedizione) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.RicevutaPeer.CODICE, getCodice());
            if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
            {
                collRicevutas = com.opcal.RicevutaPeer.doSelectJoinCliente(criteria, connection);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setSpedizione((Spedizione) this);
                }
            }
        }
        lastRicevutaCriteria = criteria;

        return collRicevutas;
    }




    private static final List<String> FIELD_NAMES;

    static
    {
        List<String> fieldNames
                = new ArrayList<String>();
        fieldNames.add("Codice");
        fieldNames.add("Peso");
        fieldNames.add("Prezzo");
        fieldNames.add("EmailMittente");
        fieldNames.add("EmailDestinatario");
        fieldNames.add("IvaCorriere");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static List<String> getFieldNames()
    {
        return FIELD_NAMES;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Codice"))
        {
            return getCodice();
        }
        if (name.equals("Peso"))
        {
            return Integer.valueOf(getPeso());
        }
        if (name.equals("Prezzo"))
        {
            return Integer.valueOf(getPrezzo());
        }
        if (name.equals("EmailMittente"))
        {
            return getEmailMittente();
        }
        if (name.equals("EmailDestinatario"))
        {
            return getEmailDestinatario();
        }
        if (name.equals("IvaCorriere"))
        {
            return getIvaCorriere();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Codice"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setCodice((String) value);
            return true;
        }
        if (name.equals("Peso"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setPeso(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Prezzo"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setPrezzo(((Integer) value).intValue());
            return true;
        }
        if (name.equals("EmailMittente"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEmailMittente((String) value);
            return true;
        }
        if (name.equals("EmailDestinatario"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEmailDestinatario((String) value);
            return true;
        }
        if (name.equals("IvaCorriere"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setIvaCorriere((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (com.opcal.SpedizionePeer.CODICE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.CODICE.getColumnName().equals(name))
        {
            return getCodice();
        }
        if (com.opcal.SpedizionePeer.PESO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.PESO.getColumnName().equals(name))
        {
            return Integer.valueOf(getPeso());
        }
        if (com.opcal.SpedizionePeer.PREZZO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.PREZZO.getColumnName().equals(name))
        {
            return Integer.valueOf(getPrezzo());
        }
        if (com.opcal.SpedizionePeer.EMAIL_MITTENTE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.EMAIL_MITTENTE.getColumnName().equals(name))
        {
            return getEmailMittente();
        }
        if (com.opcal.SpedizionePeer.EMAIL_DESTINATARIO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.EMAIL_DESTINATARIO.getColumnName().equals(name))
        {
            return getEmailDestinatario();
        }
        if (com.opcal.SpedizionePeer.IVA_CORRIERE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.IVA_CORRIERE.getColumnName().equals(name))
        {
            return getIvaCorriere();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (com.opcal.SpedizionePeer.CODICE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.CODICE.getColumnName().equals(name))
        {
            return setByName("Codice", value);
        }
        if (com.opcal.SpedizionePeer.PESO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.PESO.getColumnName().equals(name))
        {
            return setByName("Peso", value);
        }
        if (com.opcal.SpedizionePeer.PREZZO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.PREZZO.getColumnName().equals(name))
        {
            return setByName("Prezzo", value);
        }
        if (com.opcal.SpedizionePeer.EMAIL_MITTENTE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.EMAIL_MITTENTE.getColumnName().equals(name))
        {
            return setByName("EmailMittente", value);
        }
        if (com.opcal.SpedizionePeer.EMAIL_DESTINATARIO.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.EMAIL_DESTINATARIO.getColumnName().equals(name))
        {
            return setByName("EmailDestinatario", value);
        }
        if (com.opcal.SpedizionePeer.IVA_CORRIERE.getSqlExpression().equals(name)
            || com.opcal.SpedizionePeer.IVA_CORRIERE.getColumnName().equals(name))
        {
            return setByName("IvaCorriere", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getCodice();
        }
        if (pos == 1)
        {
            return Integer.valueOf(getPeso());
        }
        if (pos == 2)
        {
            return Integer.valueOf(getPrezzo());
        }
        if (pos == 3)
        {
            return getEmailMittente();
        }
        if (pos == 4)
        {
            return getEmailDestinatario();
        }
        if (pos == 5)
        {
            return getIvaCorriere();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Codice", value);
        }
        if (position == 1)
        {
            return setByName("Peso", value);
        }
        if (position == 2)
        {
            return setByName("Prezzo", value);
        }
        if (position == 3)
        {
            return setByName("EmailMittente", value);
        }
        if (position == 4)
        {
            return setByName("EmailDestinatario", value);
        }
        if (position == 5)
        {
            return setByName("IvaCorriere", value);
        }
        return false;
    }



    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save() throws TorqueException
    {
        save(SpedizionePeer.DATABASE_NAME);
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @param dbName the name of the database to which the object
     *        should be saved.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(String dbName) 
            throws TorqueException
    {
        try (TorqueConnection con = Transaction.begin(dbName))
        {
            save(con);
            Transaction.commit(con);
        }
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally.
     *
     * @param con the connection to use for saving the object, not null.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(Connection con) 
            throws TorqueException
    {
        if (isSaving())
        {
            return;
        }
        try
        {
            setSaving(true);
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    SpedizionePeer.doInsert((Spedizione) this, con);
                    setNew(false);
                }
                else
                {
                    SpedizionePeer.doUpdate((Spedizione) this, con);
                }
            }

            if (isRicevutasInitialized())
            {
                for (Ricevuta collRicevutas : getRicevutas())
                {
                    collRicevutas.save(con);
                }
            }
            if (isPrenotatasInitialized())
            {
                for (Prenotata collPrenotatas : getPrenotatas())
                {
                    collPrenotatas.save(con);
                }
            }
            if (isInCorsosInitialized())
            {
                for (InCorso collInCorsos : getInCorsos())
                {
                    collInCorsos.save(con);
                }
            }
            if (isEffettuatasInitialized())
            {
                for (Effettuata collEffettuatas : getEffettuatas())
                {
                    collEffettuatas.save(con);
                }
            }
            if (isResosInitialized())
            {
                for (Reso collResos : getResos())
                {
                    collResos.save(con);
                }
            }
        }
        finally
        {
            setSaving(false);
        }
    }




    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key codice ObjectKey
     */
    public void setPrimaryKey(ObjectKey<?> key)
        
    {
        setCodice(key.toString());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key the primary key to set.
     */
    public void setPrimaryKey(String key) 
    {
        setCodice(key);
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey<?> getPrimaryKey()
    {
        return SimpleKey.keyFor(getCodice());
    }


    /**
     * Returns an id that differentiates the referenced Corriere object
     * from all other Corriere objects.
     *
     * @return an ObjectKey.
     */
    public ObjectKey<?> getForeignKeyForCorriere()
    {
        return SimpleKey.keyFor(getIvaCorriere());
    }
    /**
     * Returns an id that differentiates the referenced Cliente object
     * from all other Cliente objects.
     *
     * @return an ObjectKey.
     */
    public ObjectKey<?> getForeignKeyForClienteRelatedByEmailMittente()
    {
        return SimpleKey.keyFor(getEmailMittente());
    }
    /**
     * Returns an id that differentiates the referenced Cliente object
     * from all other Cliente objects.
     *
     * @return an ObjectKey.
     */
    public ObjectKey<?> getForeignKeyForClienteRelatedByEmailDestinatario()
    {
        return SimpleKey.keyFor(getEmailDestinatario());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     * @throws TorqueException if retrieval of the associated objects fails  
     */
    public Spedizione copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using a connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails     
     */
    public Spedizione copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Spedizione copy(boolean deepcopy) throws TorqueException
    {
        Spedizione spedizione = new Spedizione();

        return copyInto(spedizione, deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Spedizione copy(boolean deepcopy, Connection con) throws TorqueException
    {
        Spedizione spedizione = new Spedizione();

        return copyInto(spedizione, deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Spedizione copyInto(Spedizione copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Spedizione copyInto(Spedizione copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    protected Spedizione copyInto(Spedizione copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setCodice((String) null);
        copyObj.setPeso(peso);
        copyObj.setPrezzo(prezzo);
        copyObj.setEmailMittente(emailMittente);
        copyObj.setEmailDestinatario(emailDestinatario);
        copyObj.setIvaCorriere(ivaCorriere);

        if (deepcopy)
        {
            if (collRicevutas != null)
            {
                for (Ricevuta obj : collRicevutas)
                {
                    copyObj.addRicevuta(obj.copy());
                }
            }
            else
            {
                copyObj.collRicevutas = null;
            }
            if (collPrenotatas != null)
            {
                for (Prenotata obj : collPrenotatas)
                {
                    copyObj.addPrenotata(obj.copy());
                }
            }
            else
            {
                copyObj.collPrenotatas = null;
            }
            if (collInCorsos != null)
            {
                for (InCorso obj : collInCorsos)
                {
                    copyObj.addInCorso(obj.copy());
                }
            }
            else
            {
                copyObj.collInCorsos = null;
            }
            if (collEffettuatas != null)
            {
                for (Effettuata obj : collEffettuatas)
                {
                    copyObj.addEffettuata(obj.copy());
                }
            }
            else
            {
                copyObj.collEffettuatas = null;
            }
            if (collResos != null)
            {
                for (Reso obj : collResos)
                {
                    copyObj.addReso(obj.copy());
                }
            }
            else
            {
                copyObj.collResos = null;
            }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Spedizione copyInto(Spedizione copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setCodice((String) null);
        copyObj.setPeso(peso);
        copyObj.setPrezzo(prezzo);
        copyObj.setEmailMittente(emailMittente);
        copyObj.setEmailDestinatario(emailDestinatario);
        copyObj.setIvaCorriere(ivaCorriere);

        if (deepcopy)
        {
            for (Ricevuta obj : getRicevutas(con))
            {
                copyObj.addRicevuta(obj.copy());
            }
            for (Prenotata obj : getPrenotatas(con))
            {
                copyObj.addPrenotata(obj.copy());
            }
            for (InCorso obj : getInCorsos(con))
            {
                copyObj.addInCorso(obj.copy());
            }
            for (Effettuata obj : getEffettuatas(con))
            {
                copyObj.addEffettuata(obj.copy());
            }
            for (Reso obj : getResos(con))
            {
                copyObj.addReso(obj.copy());
            }
        }
        return copyObj;
    }

    /** The Peer class */
    private static final com.opcal.SpedizionePeer peer
            = new com.opcal.SpedizionePeer();

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public com.opcal.SpedizionePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     * @throws TorqueException if associated objects are not found
     */
    public TableMap getTableMap() throws TorqueException
    {
        return com.opcal.SpedizionePeer.getTableMap();
    }



    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Spedizione:\n");
        str.append("codice = ")
           .append(getCodice())
           .append("\n");
        str.append("peso = ")
           .append(getPeso())
           .append("\n");
        str.append("prezzo = ")
           .append(getPrezzo())
           .append("\n");
        str.append("emailMittente = ")
           .append(getEmailMittente())
           .append("\n");
        str.append("emailDestinatario = ")
           .append(getEmailDestinatario())
           .append("\n");
        str.append("ivaCorriere = ")
           .append(getIvaCorriere())
           .append("\n");
        return(str.toString());
    }

    /**
     * Compares the primary key of this instance with the key of another.
     *
     * @param toCompare The object to compare to.
     * @return Whether the primary keys are equal and the object have the
     *         same class.
     */
    public boolean equals(Object toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!getClass().equals(toCompare.getClass()))
        {
            return false;
        }
        Spedizione other = (Spedizione) toCompare;
        if (getPrimaryKey() == null || other.getPrimaryKey() == null)
        {
            return false;
        }
        return getPrimaryKey().equals(other.getPrimaryKey());
    }

    /**
     * If the primary key is not <code>null</code>, return the hashcode of the
     * primary key.  Otherwise calls <code>Object.hashCode()</code>.
     *
     * @return an <code>int</code> value
     */
    public int hashCode()
    {
        ObjectKey<?> ok = getPrimaryKey();
        if (ok == null)
        {
            return super.hashCode();
        }

        return ok.hashCode();
    }



    /**
     * Compares the content of this object to another object
     *
     * @param toCompare The object to compare to.
     * @return true if all of the columns in the other object have 
     *         the same value as the objects in this class.
     */
    public boolean valueEquals(Spedizione toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!Objects.equals(this.codice, toCompare.getCodice()))
        {
            return false;
        }
        if (this.peso != toCompare.getPeso())
        {
            return false;
        }
        if (this.prezzo != toCompare.getPrezzo())
        {
            return false;
        }
        if (!Objects.equals(this.emailMittente, toCompare.getEmailMittente()))
        {
            return false;
        }
        if (!Objects.equals(this.emailDestinatario, toCompare.getEmailDestinatario()))
        {
            return false;
        }
        if (!Objects.equals(this.ivaCorriere, toCompare.getIvaCorriere()))
        {
            return false;
        }
        return true;
    }



}
