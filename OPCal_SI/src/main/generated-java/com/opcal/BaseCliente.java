package com.opcal;

import java.io.Serializable;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ColumnAccessByName;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.util.TorqueConnection;
import org.apache.torque.util.Transaction;

/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 13 14:45:20 CET 2025]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to Cliente
 */
@SuppressWarnings("unused")
public abstract class BaseCliente 
    implements Persistent, Serializable, ColumnAccessByName
{
    /** Serial version */
    private static final long serialVersionUID = 1741873520821L;



    /** Email cliente */
    private String email = null;

    /** Whether this object was modified after loading or after last save. */
    private boolean modified = true;

    /** 
     * Whether this object was loaded from the database or already saved 
     * (false) or whether it is not yet in the database(true).
     */
    private boolean isNew = true;

    /** Flag which indicates whether this object is currently saving. */
    private boolean saving = false;

    /** 
     * Flag which indicates whether this object is currently loaded
     * from the database. 
     */
    private boolean loading = false;

    /** 
     * Flag which indicates whether this object was deleted from the database.
     * Note that this flags does not always display the current database state,
     * there is no magical connection between this flag and the database.
     */
    private boolean deleted = false;

    /** Defines the aUtente field. */
    private Utente aUtente = null;



    /** Defines the collIndirizzos field. */
    protected List<Indirizzo> collIndirizzos = null;

    /** Defines the collRicevutas field. */
    protected List<Ricevuta> collRicevutas = null;

    /** Defines the collSpedizionesRelatedByEmailMittente field. */
    protected List<Spedizione> collSpedizionesRelatedByEmailMittente = null;

    /** Defines the collSpedizionesRelatedByEmailDestinatario field. */
    protected List<Spedizione> collSpedizionesRelatedByEmailDestinatario = null;



    /**
     * Get the value of email.
     * The field is described as follows: 
     * Email cliente
     *
     * @return the value of email as String
     */
    public String getEmail() 
    {
        
        return email;
    }

    /**
     * Set the value of email.
     * The field is described as follows: 
     * Email cliente
     *
     * @param v new value of email
     */
    public void setEmail(String v)
    {
        if (!Objects.equals(this.email, v))
        {
            setModified(true);
        }

        this.email = v;
        if (aUtente != null && !Objects.equals(aUtente.getEmail(), v))
        {
            aUtente = null;
        }

        // update associated objects in collIndirizzos 
        if (collIndirizzos != null)
        {
            for (Indirizzo element : collIndirizzos)
            {
                element.setEmailCliente(v);
            }
        }
        // update associated objects in collRicevutas 
        if (collRicevutas != null)
        {
            for (Ricevuta element : collRicevutas)
            {
                element.setEmailCliente(v);
            }
        }
        // update associated objects in collSpedizionesRelatedByEmailMittente 
        if (collSpedizionesRelatedByEmailMittente != null)
        {
            for (Spedizione element : collSpedizionesRelatedByEmailMittente)
            {
                element.setEmailMittente(v);
            }
        }
        // update associated objects in collSpedizionesRelatedByEmailDestinatario 
        if (collSpedizionesRelatedByEmailDestinatario != null)
        {
            for (Spedizione element : collSpedizionesRelatedByEmailDestinatario)
            {
                element.setEmailDestinatario(v);
            }
        }

    }
    

    /**
     * Returns whether the object has ever been saved.  This will
     * be false, if the object was retrieved from storage or was created
     * and then saved.
     *
     * @return true, if the object has never been persisted.
     */
    public boolean isNew()
    {
        return isNew;
    }

    /**
     * Sets whether the object has ever been saved.
     *
     * @param isNew true if the object has never been saved, false otherwise.
     */
    public void setNew(boolean isNew)
    {
        this.isNew = isNew;
    }

    /**
     * Returns whether the object has been modified.
     *
     * @return True if the object has been modified.
     */
    public boolean isModified()
    {
        return modified;
    }

    /**
     * Sets whether the object has been modified.
     *
     * @param modified true if the object has been modified, false otherwise.
     */
    public void setModified(boolean modified)
    {
        this.modified = modified;
    }

    /**
     * Sets the modified state for the object to be false.
     */
    public void resetModified()
    {
        modified = false;
    }


    /**
     * Returns whether this object is currently saving.
     *
     * @return true if this object is currently saving, false otherwise.
     */
    public boolean isSaving()
    {
        return saving;
    }

    /**
     * Sets whether this object is currently saving.
     *
     * @param saving true if this object is currently saving, false otherwise.
     */
    public void setSaving(boolean saving)
    {
        this.saving = saving;
    }


    /**
     * Returns whether this object is currently being loaded from the database.
     *
     * @return true if this object is currently loading, false otherwise.
     */
    public boolean isLoading()
    {
        return loading;
    }

    /**
     * Sets whether this object is currently being loaded from the database.
     *
     * @param loading true if this object is currently loading, false otherwise.
     */
    public void setLoading(boolean loading)
    {
        this.loading = loading;
    }


    /**
     * Returns whether this object was deleted from the database.
     * Note that this getter does not automatically reflect database state,
     * it will be set to true by Torque if doDelete() was called with this 
     * object. Bulk deletes and deletes via primary key do not change
     * this flag. Also, if doDelete() was called on an object which does
     * not exist in the database, the deleted flag is set to true even if
     * it was not deleted.
     *
     * @return true if this object was deleted, false otherwise.
     */
    public boolean isDeleted()
    {
        return deleted;
    }

    /**
     * Sets whether this object was deleted from the database.
     *
     * @param deleted true if this object was deleted, false otherwise.
     */
    public void setDeleted(boolean deleted)
    {
        this.deleted = deleted;
    }


    /**
     * Returns the associated Utente object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated Utente object
     * @throws TorqueException when reading from the database fails.
     */
    public Utente getUtente()
        throws TorqueException
    {
        if (aUtente == null && !Objects.equals(this.email, null))
        {
            aUtente = com.opcal.UtentePeer.retrieveByPK(SimpleKey.keyFor(this.email));
        }
        return aUtente;
    }

    /**
     * Return the associated Utente object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated Utente object
     * @throws TorqueException If a problem occurs with the get[Utente] method.
     */
    public Utente getUtente(Connection connection)
        throws TorqueException
    {
        if (aUtente == null && !Objects.equals(this.email, null))
        {
            aUtente = com.opcal.UtentePeer.retrieveByPK(SimpleKey.keyFor(this.email), connection);
        }
        return aUtente;
    }


    /**
     * Declares an association between this object and a Utente object
     *
     * @param v Utente
     */
    public void setUtente(Utente v)
    {
        if (v == null)
        {
            setEmail(null);
        }
        else
        {
            setEmail(v.getEmail());
        }
        aUtente = v;
    }
    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     * @param key the key to set
     * @throws TorqueException if associated objects are not found
     */
    public void setUtenteKey(ObjectKey<?> key) throws TorqueException
    {
       
        setEmail(key.toString());
     }



    /**
     * Initializes the cache collIndirizzos for referenced objects.
     * This, means, if collIndirizzos is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collIndirizzos, not null.
     */
    public List<Indirizzo> initIndirizzos()
    {
        if (collIndirizzos == null)
        {
            collIndirizzos = new ArrayList<Indirizzo>();
        }
        return collIndirizzos;
    }

    /**
     * Checks whether the cache collIndirizzos for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isIndirizzosInitialized()
    {
        return (collIndirizzos != null);
    }


    /**
     * Method called to associate a Indirizzo object to this object
     * through the collIndirizzos foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addIndirizzo(Indirizzo toAdd)
        throws TorqueException
    {
        toAdd.setCliente((Cliente) this);
        getIndirizzos().add(toAdd);
    }

    /**
     * Method called to associate a Indirizzo object to this object
     * through the collIndirizzos foreign key attribute using connection.
     *
     * @param l Indirizzo
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addIndirizzo(Indirizzo l, Connection con) throws TorqueException
    {
        getIndirizzos(con).add(l);
        l.setCliente((Cliente) this);
    }
    
    /**
     * Method called to reset the cache of Indirizzo objects
     * which are related through the collIndirizzos foreign key attribute.
     */
    public void resetIndirizzo()
    {
        collIndirizzos = null;
    }


    /**
     * The criteria used to select the current contents of collIndirizzos
     */
    private Criteria lastIndirizzoCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIndirizzos(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Indirizzo> getIndirizzos()
        throws TorqueException
    {
        if (collIndirizzos == null)
        {
            collIndirizzos = getIndirizzos(new Criteria());
            for (Indirizzo indirizzo : collIndirizzos)
            {
                indirizzo.setCliente((Cliente) this);
            }
        }
        return collIndirizzos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve related collIndirizzos from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Indirizzo> getIndirizzos(Criteria criteria) throws TorqueException
    {
        if (collIndirizzos == null)
        {
            if (isNew())
            {
               initIndirizzos();
            }
            else
            {
                criteria.and(com.opcal.IndirizzoPeer.EMAIL_CLIENTE, getEmail());
                collIndirizzos = com.opcal.IndirizzoPeer.doSelect(criteria);
                for (Indirizzo indirizzo : collIndirizzos)
                {
                    indirizzo.setCliente((Cliente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.IndirizzoPeer.EMAIL_CLIENTE, getEmail());
                if (lastIndirizzoCriteria == null
                        || !lastIndirizzoCriteria.equals(criteria))
                {
                    collIndirizzos = com.opcal.IndirizzoPeer.doSelect(criteria);
                    for (Indirizzo indirizzo : collIndirizzos)
                    {
                        indirizzo.setCliente((Cliente) this);
                    }
                }
            }
        }
        lastIndirizzoCriteria = criteria;
        return collIndirizzos;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIndirizzos(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Indirizzo> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Indirizzo> getIndirizzos(Connection con) throws TorqueException
    {
        if (collIndirizzos == null)
        {
            collIndirizzos = getIndirizzos(new Criteria(), con);
            for (Indirizzo indirizzo : collIndirizzos)
            {
                indirizzo.setCliente((Cliente) this);
            }
        }
        return collIndirizzos;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve the related Indirizzo Objects
     * from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Indirizzo> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Indirizzo> getIndirizzos(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collIndirizzos == null)
        {
            if (isNew())
            {
               initIndirizzos();
            }
            else
            {
                criteria.and(com.opcal.IndirizzoPeer.EMAIL_CLIENTE, getEmail());
                collIndirizzos = com.opcal.IndirizzoPeer.doSelect(criteria, con);
                for (Indirizzo indirizzo : collIndirizzos)
                {
                    indirizzo.setCliente((Cliente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.IndirizzoPeer.EMAIL_CLIENTE, getEmail());
                if (lastIndirizzoCriteria == null
                        || !lastIndirizzoCriteria.equals(criteria))
                {
                    collIndirizzos = com.opcal.IndirizzoPeer.doSelect(criteria, con);
                    for (Indirizzo indirizzo : collIndirizzos)
                    {
                        indirizzo.setCliente((Cliente) this);
                    }
                }
            }
        }
        lastIndirizzoCriteria = criteria;

        return collIndirizzos;
    }

    /**
     * Initializes the cache collRicevutas for referenced objects.
     * This, means, if collRicevutas is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collRicevutas, not null.
     */
    public List<Ricevuta> initRicevutas()
    {
        if (collRicevutas == null)
        {
            collRicevutas = new ArrayList<Ricevuta>();
        }
        return collRicevutas;
    }

    /**
     * Checks whether the cache collRicevutas for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isRicevutasInitialized()
    {
        return (collRicevutas != null);
    }


    /**
     * Method called to associate a Ricevuta object to this object
     * through the collRicevutas foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addRicevuta(Ricevuta toAdd)
        throws TorqueException
    {
        toAdd.setCliente((Cliente) this);
        getRicevutas().add(toAdd);
    }

    /**
     * Method called to associate a Ricevuta object to this object
     * through the collRicevutas foreign key attribute using connection.
     *
     * @param l Ricevuta
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addRicevuta(Ricevuta l, Connection con) throws TorqueException
    {
        getRicevutas(con).add(l);
        l.setCliente((Cliente) this);
    }
    
    /**
     * Method called to reset the cache of Ricevuta objects
     * which are related through the collRicevutas foreign key attribute.
     */
    public void resetRicevuta()
    {
        collRicevutas = null;
    }


    /**
     * The criteria used to select the current contents of collRicevutas
     */
    private Criteria lastRicevutaCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRicevutas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Ricevuta> getRicevutas()
        throws TorqueException
    {
        if (collRicevutas == null)
        {
            collRicevutas = getRicevutas(new Criteria());
            for (Ricevuta ricevuta : collRicevutas)
            {
                ricevuta.setCliente((Cliente) this);
            }
        }
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve related collRicevutas from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Ricevuta> getRicevutas(Criteria criteria) throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
               initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
                collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setCliente((Cliente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
                if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
                {
                    collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria);
                    for (Ricevuta ricevuta : collRicevutas)
                    {
                        ricevuta.setCliente((Cliente) this);
                    }
                }
            }
        }
        lastRicevutaCriteria = criteria;
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRicevutas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Ricevuta> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Ricevuta> getRicevutas(Connection con) throws TorqueException
    {
        if (collRicevutas == null)
        {
            collRicevutas = getRicevutas(new Criteria(), con);
            for (Ricevuta ricevuta : collRicevutas)
            {
                ricevuta.setCliente((Cliente) this);
            }
        }
        return collRicevutas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve the related Ricevuta Objects
     * from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Ricevuta> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Ricevuta> getRicevutas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
               initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
                collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria, con);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setCliente((Cliente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
                if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
                {
                    collRicevutas = com.opcal.RicevutaPeer.doSelect(criteria, con);
                    for (Ricevuta ricevuta : collRicevutas)
                    {
                        ricevuta.setCliente((Cliente) this);
                    }
                }
            }
        }
        lastRicevutaCriteria = criteria;

        return collRicevutas;
    }

    /**
     * Initializes the cache collSpedizionesRelatedByEmailMittente for referenced objects.
     * This, means, if collSpedizionesRelatedByEmailMittente is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collSpedizionesRelatedByEmailMittente, not null.
     */
    public List<Spedizione> initSpedizioneRelatedByEmailMittentes()
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            collSpedizionesRelatedByEmailMittente = new ArrayList<Spedizione>();
        }
        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * Checks whether the cache collSpedizionesRelatedByEmailMittente for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isSpedizioneRelatedByEmailMittentesInitialized()
    {
        return (collSpedizionesRelatedByEmailMittente != null);
    }


    /**
     * Method called to associate a Spedizione object to this object
     * through the collSpedizionesRelatedByEmailMittente foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addSpedizioneRelatedByEmailMittente(Spedizione toAdd)
        throws TorqueException
    {
        toAdd.setClienteRelatedByEmailMittente((Cliente) this);
        getSpedizioneRelatedByEmailMittentes().add(toAdd);
    }

    /**
     * Method called to associate a Spedizione object to this object
     * through the collSpedizionesRelatedByEmailMittente foreign key attribute using connection.
     *
     * @param l Spedizione
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addSpedizioneRelatedByEmailMittente(Spedizione l, Connection con) throws TorqueException
    {
        getSpedizioneRelatedByEmailMittentes(con).add(l);
        l.setClienteRelatedByEmailMittente((Cliente) this);
    }
    
    /**
     * Method called to reset the cache of Spedizione objects
     * which are related through the collSpedizionesRelatedByEmailMittente foreign key attribute.
     */
    public void resetSpedizioneRelatedByEmailMittente()
    {
        collSpedizionesRelatedByEmailMittente = null;
    }


    /**
     * The criteria used to select the current contents of collSpedizionesRelatedByEmailMittente
     */
    private Criteria lastSpedizioneRelatedByEmailMittenteCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSpedizioneRelatedByEmailMittentes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Spedizione> getSpedizioneRelatedByEmailMittentes()
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            collSpedizionesRelatedByEmailMittente = getSpedizioneRelatedByEmailMittentes(new Criteria());
            for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
            {
                spedizione.setClienteRelatedByEmailMittente((Cliente) this);
            }
        }
        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve related collSpedizionesRelatedByEmailMittente from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Spedizione> getSpedizioneRelatedByEmailMittentes(Criteria criteria) throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            if (isNew())
            {
               initSpedizioneRelatedByEmailMittentes();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelect(criteria);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                if (lastSpedizioneRelatedByEmailMittenteCriteria == null
                        || !lastSpedizioneRelatedByEmailMittenteCriteria.equals(criteria))
                {
                    collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelect(criteria);
                    for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                    {
                        spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                    }
                }
            }
        }
        lastSpedizioneRelatedByEmailMittenteCriteria = criteria;
        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSpedizioneRelatedByEmailMittentes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Spedizione> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Spedizione> getSpedizioneRelatedByEmailMittentes(Connection con) throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            collSpedizionesRelatedByEmailMittente = getSpedizioneRelatedByEmailMittentes(new Criteria(), con);
            for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
            {
                spedizione.setClienteRelatedByEmailMittente((Cliente) this);
            }
        }
        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve the related Spedizione Objects
     * from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Spedizione> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Spedizione> getSpedizioneRelatedByEmailMittentes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            if (isNew())
            {
               initSpedizioneRelatedByEmailMittentes();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelect(criteria, con);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                if (lastSpedizioneRelatedByEmailMittenteCriteria == null
                        || !lastSpedizioneRelatedByEmailMittenteCriteria.equals(criteria))
                {
                    collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelect(criteria, con);
                    for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                    {
                        spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                    }
                }
            }
        }
        lastSpedizioneRelatedByEmailMittenteCriteria = criteria;

        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * Initializes the cache collSpedizionesRelatedByEmailDestinatario for referenced objects.
     * This, means, if collSpedizionesRelatedByEmailDestinatario is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collSpedizionesRelatedByEmailDestinatario, not null.
     */
    public List<Spedizione> initSpedizioneRelatedByEmailDestinatarios()
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            collSpedizionesRelatedByEmailDestinatario = new ArrayList<Spedizione>();
        }
        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * Checks whether the cache collSpedizionesRelatedByEmailDestinatario for referenced objects has either been
     * loaded from the database or has been manually initialized.
     *
     * @return boolean true if initialized
     */
    public boolean isSpedizioneRelatedByEmailDestinatariosInitialized()
    {
        return (collSpedizionesRelatedByEmailDestinatario != null);
    }


    /**
     * Method called to associate a Spedizione object to this object
     * through the collSpedizionesRelatedByEmailDestinatario foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addSpedizioneRelatedByEmailDestinatario(Spedizione toAdd)
        throws TorqueException
    {
        toAdd.setClienteRelatedByEmailDestinatario((Cliente) this);
        getSpedizioneRelatedByEmailDestinatarios().add(toAdd);
    }

    /**
     * Method called to associate a Spedizione object to this object
     * through the collSpedizionesRelatedByEmailDestinatario foreign key attribute using connection.
     *
     * @param l Spedizione
     * @throws TorqueException if retrieval of the associated objects fails.
     */
    public void addSpedizioneRelatedByEmailDestinatario(Spedizione l, Connection con) throws TorqueException
    {
        getSpedizioneRelatedByEmailDestinatarios(con).add(l);
        l.setClienteRelatedByEmailDestinatario((Cliente) this);
    }
    
    /**
     * Method called to reset the cache of Spedizione objects
     * which are related through the collSpedizionesRelatedByEmailDestinatario foreign key attribute.
     */
    public void resetSpedizioneRelatedByEmailDestinatario()
    {
        collSpedizionesRelatedByEmailDestinatario = null;
    }


    /**
     * The criteria used to select the current contents of collSpedizionesRelatedByEmailDestinatario
     */
    private Criteria lastSpedizioneRelatedByEmailDestinatarioCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSpedizioneRelatedByEmailDestinatarios(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Spedizione> getSpedizioneRelatedByEmailDestinatarios()
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            collSpedizionesRelatedByEmailDestinatario = getSpedizioneRelatedByEmailDestinatarios(new Criteria());
            for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
            {
                spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
            }
        }
        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve related collSpedizionesRelatedByEmailDestinatario from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException If a problem occurs with the get[criteria] method.     
     */
    public List<Spedizione> getSpedizioneRelatedByEmailDestinatarios(Criteria criteria) throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            if (isNew())
            {
               initSpedizioneRelatedByEmailDestinatarios();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelect(criteria);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                if (lastSpedizioneRelatedByEmailDestinatarioCriteria == null
                        || !lastSpedizioneRelatedByEmailDestinatarioCriteria.equals(criteria))
                {
                    collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelect(criteria);
                    for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                    {
                        spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                    }
                }
            }
        }
        lastSpedizioneRelatedByEmailDestinatarioCriteria = criteria;
        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSpedizioneRelatedByEmailDestinatarios(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Spedizione> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Spedizione> getSpedizioneRelatedByEmailDestinatarios(Connection con) throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            collSpedizionesRelatedByEmailDestinatario = getSpedizioneRelatedByEmailDestinatarios(new Criteria(), con);
            for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
            {
                spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
            }
        }
        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente has previously
     * been saved, it will retrieve the related Spedizione Objects
     * from storage.
     * If this BaseCliente is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     *
     * @param con the Connection
     * @return List<Spedizione> results of the collection
     * @throws TorqueException If a problem occurs with the get[connection] method.
     */
    public List<Spedizione> getSpedizioneRelatedByEmailDestinatarios(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            if (isNew())
            {
               initSpedizioneRelatedByEmailDestinatarios();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelect(criteria, con);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                if (lastSpedizioneRelatedByEmailDestinatarioCriteria == null
                        || !lastSpedizioneRelatedByEmailDestinatarioCriteria.equals(criteria))
                {
                    collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelect(criteria, con);
                    for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                    {
                        spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                    }
                }
            }
        }
        lastSpedizioneRelatedByEmailDestinatarioCriteria = criteria;

        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Ricevuta> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Ricevuta> getRicevutasJoinSpedizione(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Ricevuta> result = getRicevutasJoinSpedizione(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this BaseCliente has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Ricevuta> getRicevutasJoinSpedizione(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collRicevutas == null)
        {
            if (isNew())
            {
                initRicevutas();
            }
            else
            {
                criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
                collRicevutas = com.opcal.RicevutaPeer.doSelectJoinSpedizione(criteria, connection);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setCliente((Cliente) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.RicevutaPeer.EMAIL_CLIENTE, getEmail());
            if (lastRicevutaCriteria == null
                        || !lastRicevutaCriteria.equals(criteria))
            {
                collRicevutas = com.opcal.RicevutaPeer.doSelectJoinSpedizione(criteria, connection);
                for (Ricevuta ricevuta : collRicevutas)
                {
                    ricevuta.setCliente((Cliente) this);
                }
            }
        }
        lastRicevutaCriteria = criteria;

        return collRicevutas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Spedizione> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailMittentesJoinCorriere(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Spedizione> result = getSpedizioneRelatedByEmailMittentesJoinCorriere(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this BaseCliente has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailMittentesJoinCorriere(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            if (isNew())
            {
                initSpedizioneRelatedByEmailMittentes();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelectJoinCorriere(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
            if (lastSpedizioneRelatedByEmailMittenteCriteria == null
                        || !lastSpedizioneRelatedByEmailMittenteCriteria.equals(criteria))
            {
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelectJoinCorriere(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        lastSpedizioneRelatedByEmailMittenteCriteria = criteria;

        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Spedizione> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailMittentesJoinClienteRelatedByEmailDestinatario(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Spedizione> result = getSpedizioneRelatedByEmailMittentesJoinClienteRelatedByEmailDestinatario(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this BaseCliente has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailMittentesJoinClienteRelatedByEmailDestinatario(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailMittente == null)
        {
            if (isNew())
            {
                initSpedizioneRelatedByEmailMittentes();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelectJoinClienteRelatedByEmailDestinatario(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.SpedizionePeer.EMAIL_MITTENTE, getEmail());
            if (lastSpedizioneRelatedByEmailMittenteCriteria == null
                        || !lastSpedizioneRelatedByEmailMittenteCriteria.equals(criteria))
            {
                collSpedizionesRelatedByEmailMittente = com.opcal.SpedizionePeer.doSelectJoinClienteRelatedByEmailDestinatario(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailMittente)
                {
                    spedizione.setClienteRelatedByEmailMittente((Cliente) this);
                }
            }
        }
        lastSpedizioneRelatedByEmailMittenteCriteria = criteria;

        return collSpedizionesRelatedByEmailMittente;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Spedizione> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailDestinatariosJoinCorriere(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Spedizione> result = getSpedizioneRelatedByEmailDestinatariosJoinCorriere(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this BaseCliente has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailDestinatariosJoinCorriere(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            if (isNew())
            {
                initSpedizioneRelatedByEmailDestinatarios();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelectJoinCorriere(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
            if (lastSpedizioneRelatedByEmailDestinatarioCriteria == null
                        || !lastSpedizioneRelatedByEmailDestinatarioCriteria.equals(criteria))
            {
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelectJoinCorriere(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        lastSpedizioneRelatedByEmailDestinatarioCriteria = criteria;

        return collSpedizionesRelatedByEmailDestinatario;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     *
     * @return List<Spedizione> the collection
     * @param criteria the criteria to use when filling the collection.
     * @throws TorqueException if associated objects are not found
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailDestinatariosJoinClienteRelatedByEmailMittente(Criteria criteria) throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(criteria.getDbName()))
        {
            List<Spedizione> result = getSpedizioneRelatedByEmailDestinatariosJoinClienteRelatedByEmailMittente(criteria, connection);

            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseCliente is new, it will return
     * an empty collection; or if this BaseCliente has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Spedizione> getSpedizioneRelatedByEmailDestinatariosJoinClienteRelatedByEmailMittente(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collSpedizionesRelatedByEmailDestinatario == null)
        {
            if (isNew())
            {
                initSpedizioneRelatedByEmailDestinatarios();
            }
            else
            {
                criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelectJoinClienteRelatedByEmailMittente(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(com.opcal.SpedizionePeer.EMAIL_DESTINATARIO, getEmail());
            if (lastSpedizioneRelatedByEmailDestinatarioCriteria == null
                        || !lastSpedizioneRelatedByEmailDestinatarioCriteria.equals(criteria))
            {
                collSpedizionesRelatedByEmailDestinatario = com.opcal.SpedizionePeer.doSelectJoinClienteRelatedByEmailMittente(criteria, connection);
                for (Spedizione spedizione : collSpedizionesRelatedByEmailDestinatario)
                {
                    spedizione.setClienteRelatedByEmailDestinatario((Cliente) this);
                }
            }
        }
        lastSpedizioneRelatedByEmailDestinatarioCriteria = criteria;

        return collSpedizionesRelatedByEmailDestinatario;
    }




    private static final List<String> FIELD_NAMES;

    static
    {
        List<String> fieldNames
                = new ArrayList<String>();
        fieldNames.add("Email");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static List<String> getFieldNames()
    {
        return FIELD_NAMES;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("Email"))
        {
            return getEmail();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("Email"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setEmail((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (com.opcal.ClientePeer.EMAIL.getSqlExpression().equals(name)
            || com.opcal.ClientePeer.EMAIL.getColumnName().equals(name))
        {
            return getEmail();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (com.opcal.ClientePeer.EMAIL.getSqlExpression().equals(name)
            || com.opcal.ClientePeer.EMAIL.getColumnName().equals(name))
        {
            return setByName("Email", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return getEmail();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("Email", value);
        }
        return false;
    }



    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save() throws TorqueException
    {
        save(ClientePeer.DATABASE_NAME);
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @param dbName the name of the database to which the object
     *        should be saved.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(String dbName) 
            throws TorqueException
    {
        try (TorqueConnection con = Transaction.begin(dbName))
        {
            save(con);
            Transaction.commit(con);
        }
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally.
     *
     * @param con the connection to use for saving the object, not null.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(Connection con) 
            throws TorqueException
    {
        if (isSaving())
        {
            return;
        }
        try
        {
            setSaving(true);
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ClientePeer.doInsert((Cliente) this, con);
                    setNew(false);
                }
                else
                {
                    ClientePeer.doUpdate((Cliente) this, con);
                }
            }

            if (isIndirizzosInitialized())
            {
                for (Indirizzo collIndirizzos : getIndirizzos())
                {
                    collIndirizzos.save(con);
                }
            }
            if (isRicevutasInitialized())
            {
                for (Ricevuta collRicevutas : getRicevutas())
                {
                    collRicevutas.save(con);
                }
            }
            if (isSpedizioneRelatedByEmailMittentesInitialized())
            {
                for (Spedizione collSpedizionesRelatedByEmailMittente : getSpedizioneRelatedByEmailMittentes())
                {
                    collSpedizionesRelatedByEmailMittente.save(con);
                }
            }
            if (isSpedizioneRelatedByEmailDestinatariosInitialized())
            {
                for (Spedizione collSpedizionesRelatedByEmailDestinatario : getSpedizioneRelatedByEmailDestinatarios())
                {
                    collSpedizionesRelatedByEmailDestinatario.save(con);
                }
            }
        }
        finally
        {
            setSaving(false);
        }
    }




    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key email ObjectKey
     */
    public void setPrimaryKey(ObjectKey<?> key)
        
    {
        setEmail(key.toString());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key the primary key to set.
     */
    public void setPrimaryKey(String key) 
    {
        setEmail(key);
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey<?> getPrimaryKey()
    {
        return SimpleKey.keyFor(getEmail());
    }


    /**
     * Returns an id that differentiates the referenced Utente object
     * from all other Utente objects.
     *
     * @return an ObjectKey.
     */
    public ObjectKey<?> getForeignKeyForUtente()
    {
        return SimpleKey.keyFor(getEmail());
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     * @throws TorqueException if retrieval of the associated objects fails  
     */
    public Cliente copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using a connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails     
     */
    public Cliente copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Cliente copy(boolean deepcopy) throws TorqueException
    {
        Cliente cliente = new Cliente();

        return copyInto(cliente, deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Cliente copy(boolean deepcopy, Connection con) throws TorqueException
    {
        Cliente cliente = new Cliente();

        return copyInto(cliente, deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Cliente copyInto(Cliente copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Cliente copyInto(Cliente copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    protected Cliente copyInto(Cliente copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setEmail((String) null);

        if (deepcopy)
        {
            if (collIndirizzos != null)
            {
                for (Indirizzo obj : collIndirizzos)
                {
                    copyObj.addIndirizzo(obj.copy());
                }
            }
            else
            {
                copyObj.collIndirizzos = null;
            }
            if (collRicevutas != null)
            {
                for (Ricevuta obj : collRicevutas)
                {
                    copyObj.addRicevuta(obj.copy());
                }
            }
            else
            {
                copyObj.collRicevutas = null;
            }
            if (collSpedizionesRelatedByEmailMittente != null)
            {
                for (Spedizione obj : collSpedizionesRelatedByEmailMittente)
                {
                    copyObj.addSpedizioneRelatedByEmailMittente(obj.copy());
                }
            }
            else
            {
                copyObj.collSpedizionesRelatedByEmailMittente = null;
            }
            if (collSpedizionesRelatedByEmailDestinatario != null)
            {
                for (Spedizione obj : collSpedizionesRelatedByEmailDestinatario)
                {
                    copyObj.addSpedizioneRelatedByEmailDestinatario(obj.copy());
                }
            }
            else
            {
                copyObj.collSpedizionesRelatedByEmailDestinatario = null;
            }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     * @throws TorqueException if retrieval of the associated objects fails
     */
    public Cliente copyInto(Cliente copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setEmail((String) null);

        if (deepcopy)
        {
            for (Indirizzo obj : getIndirizzos(con))
            {
                copyObj.addIndirizzo(obj.copy());
            }
            for (Ricevuta obj : getRicevutas(con))
            {
                copyObj.addRicevuta(obj.copy());
            }
            for (Spedizione obj : getSpedizioneRelatedByEmailMittentes(con))
            {
                copyObj.addSpedizioneRelatedByEmailMittente(obj.copy());
            }
            for (Spedizione obj : getSpedizioneRelatedByEmailDestinatarios(con))
            {
                copyObj.addSpedizioneRelatedByEmailDestinatario(obj.copy());
            }
        }
        return copyObj;
    }

    /** The Peer class */
    private static final com.opcal.ClientePeer peer
            = new com.opcal.ClientePeer();

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public com.opcal.ClientePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     * @throws TorqueException if associated objects are not found
     */
    public TableMap getTableMap() throws TorqueException
    {
        return com.opcal.ClientePeer.getTableMap();
    }



    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Cliente:\n");
        str.append("email = ")
           .append(getEmail())
           .append("\n");
        return(str.toString());
    }

    /**
     * Compares the primary key of this instance with the key of another.
     *
     * @param toCompare The object to compare to.
     * @return Whether the primary keys are equal and the object have the
     *         same class.
     */
    public boolean equals(Object toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!getClass().equals(toCompare.getClass()))
        {
            return false;
        }
        Cliente other = (Cliente) toCompare;
        if (getPrimaryKey() == null || other.getPrimaryKey() == null)
        {
            return false;
        }
        return getPrimaryKey().equals(other.getPrimaryKey());
    }

    /**
     * If the primary key is not <code>null</code>, return the hashcode of the
     * primary key.  Otherwise calls <code>Object.hashCode()</code>.
     *
     * @return an <code>int</code> value
     */
    public int hashCode()
    {
        ObjectKey<?> ok = getPrimaryKey();
        if (ok == null)
        {
            return super.hashCode();
        }

        return ok.hashCode();
    }



    /**
     * Compares the content of this object to another object
     *
     * @param toCompare The object to compare to.
     * @return true if all of the columns in the other object have 
     *         the same value as the objects in this class.
     */
    public boolean valueEquals(Cliente toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!Objects.equals(this.email, toCompare.getEmail()))
        {
            return false;
        }
        return true;
    }



}
