package com.opcal;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.TorqueException;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.criteria.Criterion;
import org.apache.torque.om.mapper.RecordMapper;
import org.apache.torque.om.mapper.CompositeMapper;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.map.TableMap;
import org.apache.torque.util.TorqueConnection;
import org.apache.torque.util.Transaction;
import org.apache.torque.util.ColumnValues;
import org.apache.torque.util.JdbcTypedValue;



/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Mar 13 14:45:22 CET 2025]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to ClientePeer
 */

@SuppressWarnings("unused")
public abstract class BaseClientePeerImpl
    extends org.apache.torque.util.AbstractPeerImpl<Cliente>
{
    /** Serial version */
    private static final long serialVersionUID = 1741873522663L;



    /**
     * Constructor.
     * The recordMapper, tableMap and databaseName fields are correctly
     * initialized.
     */
    public BaseClientePeerImpl()
    {
        this(new ClienteRecordMapper(),
            ClientePeer.TABLE,
            ClientePeer.DATABASE_NAME);
    }

    /**
     * Constructor providing the objects to be injected as parameters.
     *
     * @param recordMapper a record mapper to map JDBC result sets to objects
     * @param tableMap the default table map
     * @param databaseName the name of the database
     */
    public BaseClientePeerImpl(
            RecordMapper<Cliente> recordMapper, 
            TableMap tableMap,
            String databaseName)
    {
        super(recordMapper, tableMap, databaseName);
    }


    /**
     * Returns a new instance of the Data object class
     */
    public Cliente getDbObjectInstance()
    {
        return new Cliente();
    }


    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.
     *
     * @param columnValues the values to update plus the primary key
     *        identifying the row to update.
     * @param con the connection to use, not null.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doUpdate(ColumnValues columnValues, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(getDatabaseName());
        correctBooleans(columnValues);

        {
            JdbcTypedValue pkValue
                = columnValues.remove(ClientePeer.EMAIL);
            if (pkValue == null)
            {
                throw new TorqueException(
                        "The value for the primary key column "
                        + "ClientePeer.EMAIL"
                        + " must be set");
            }
            if (pkValue.getSqlExpression() == null)
            {
                selectCriteria.where(
                        ClientePeer.EMAIL,
                        pkValue.getValue());
            }
            else
            {
                selectCriteria.where(
                        ClientePeer.EMAIL,
                        pkValue.getSqlExpression());
            }
        }


        int rowCount = doUpdate(selectCriteria, columnValues, con);
        return rowCount;
    }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     *
     * @param obj the data object to delete in the database, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(Cliente obj) throws TorqueException
    {
        int result = doDelete(buildCriteria(obj.getPrimaryKey()));
        obj.setDeleted(true);
        return result;
    }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     * This method is to be used during a transaction, otherwise use the
     * doDelete(Cliente) method.
     *
     * @param obj the data object to delete in the database, not null.
     * @param con the connection to use, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(Cliente obj, Connection con)
        throws TorqueException
    {
        int result = doDelete(buildCriteria(obj.getPrimaryKey()), con);
        obj.setDeleted(true);
        return result;
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     *
     * @param objects the data object to delete in the database, not null,
     *        may not contain null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(Collection<Cliente> objects)
            throws TorqueException
    {
        int result = doDelete(buildPkCriteria(objects));
        objects.forEach(object -> object.setDeleted(true));
        return result;
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
     *
     * @param objects the data objects to delete in the database, not null,
     *        may not contain null.
     * @param con the connection to use for deleting, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(
            Collection<Cliente> objects,
            Connection con)
        throws TorqueException
    {
        int result = doDelete(buildPkCriteria(objects), con);
        objects.forEach(object -> object.setDeleted(true));
        return result;
    }

    /** 
     * Build a Criteria object which selects all objects which have a given
     * primary key.
     *
     * @param pk the primary key value to build the criteria from, not null.
     */
    public Criteria buildCriteria(ObjectKey<?> pk)
    {
        Criteria criteria = new Criteria();
        criteria.and(ClientePeer.EMAIL, pk);
        return criteria;
     }

    /** 
     * Build a Criteria object which selects all objects which primary keys
     * are contained in the passed collection.
     *
     * @param pks the primary key values to build the criteria from, not null,
     *        may not contain null.
     */
    public Criteria buildCriteria(Collection<ObjectKey<?>> pks)
    {
        Criteria criteria = new Criteria();
        criteria.andIn(ClientePeer.EMAIL, pks);
        return criteria;
     }


    /** 
     * Build a Criteria object which selects all passed objects using their
     * primary key. Objects which do not yet have a primary key are ignored.
     *
     * @param objects the objects to build the criteria from, not null,
     *        may not contain null.
     */
    public Criteria buildPkCriteria(
            Collection<Cliente> objects)
    {
        return buildCriteria(objects.stream()
                .map(object -> object.getPrimaryKey())
                .collect(Collectors.toList()));
    }

    /** 
     * Build a Criteria object from the data object for this peer.
     * The primary key columns are only added if the object is not new.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public Criteria buildCriteria(Cliente obj)
    {
        Criteria criteria = new Criteria(getDatabaseName());
        if (!obj.isNew())
        {
            criteria.and(ClientePeer.EMAIL, obj.getEmail());
        }
        return criteria;
    }

    /** 
     * Build a Criteria object from the data object for this peer,
     * skipping all binary columns.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public Criteria buildSelectCriteria(Cliente obj)
    {
        Criteria criteria = new Criteria(getDatabaseName());
        if (!obj.isNew())
        {
            criteria.and(ClientePeer.EMAIL, obj.getEmail());
        }
        return criteria;
    }

    /** 
     * Returns the contents of the object as ColumnValues object.
     * Primary key columns which are generated on insertion are not
     * added to the returned object if they still have their initial
     * value. Also, columns which have the useDatabaseDefaultValue
     * flag set to true are also not added to the returned object
     * if they still have their initial value.
     *
     * @throws TorqueException if the table map cannot be retrieved
     *         (should not happen).
     */
    public ColumnValues buildColumnValues(Cliente cliente)
            throws TorqueException
    {
        ColumnValues columnValues = new ColumnValues();
        if (!cliente.isNew() 
            || cliente.getEmail() != null)
        {
            columnValues.put(
                    ClientePeer.EMAIL,
                    new JdbcTypedValue(
                        cliente.getEmail(),
                        12));
        }
        return columnValues;
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public Cliente retrieveByPK(String pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public Cliente retrieveByPK(String pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
    
    
    

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public Cliente retrieveByPK(ObjectKey<?> pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            Cliente result = retrieveByPK(pk, connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public Cliente retrieveByPK(ObjectKey<?> pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        Cliente v = doSelectSingleRecord(criteria, con);
        if (v == null)
        {
            throw new NoRowsException("Failed to select a row.");
        }

        return v;
    }


    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys.
     *        Entries in pks which do not match entries in the database are ignored.
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> retrieveByTypedPKs(Collection<String> pks)
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            List<Cliente> result = retrieveByTypedPKs(pks, connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys.
     *        Entries in pks which do not match entries in the database are ignored.
     * @param dbcon the connection to use
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> retrieveByTypedPKs(
                Collection<String> pks,
                Connection dbcon)
            throws TorqueException
    {
        if (pks == null || pks.size() == 0)
        {
            return new ArrayList<Cliente>();
        }
        List<ObjectKey<?>> objectKeyList = new ArrayList<ObjectKey<?>>();
        for (String pk : pks)
        {
            objectKeyList.add(SimpleKey.keyFor(pk));
        }
        Criteria criteria = buildCriteria(objectKeyList);
        List<Cliente> result = doSelect(criteria, dbcon);
        return result;
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys.
     *        Entries in pks which do not match entries in the database are ignored.
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> retrieveByObjectKeys(Collection<ObjectKey<?>> pks)
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            List<Cliente> result = retrieveByObjectKeys(pks, connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * Retrieve multiple objects by pk.
     *
     * @param pks List of primary keys.
     *        Entries in pks which do not match entries in the database are ignored.
     * @param dbcon the connection to use
     *
     * @return the list of matching objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> retrieveByObjectKeys(
                Collection<ObjectKey<?>> pks,
                Connection dbcon)
            throws TorqueException
    {
        if (pks == null || pks.size() == 0)
        {
            return new ArrayList<Cliente>();
        }
        Criteria criteria = buildCriteria(pks);
        List<Cliente> result = doSelect(criteria, dbcon);
        return result;
    }


    /**
     * Selects a collection of dbObjectClassName objects pre-filled with their
     * Utente objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> doSelectJoinUtente(Criteria criteria)
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            List<Cliente> result
                    = ClientePeer.doSelectJoinUtente(criteria, connection);
            Transaction.commit(connection);
            return result;
        }
    }

    /**
     * Selects a collection of Cliente objects pre-filled with their
     * Utente objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<Cliente> doSelectJoinUtente(
            Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        com.opcal.UtentePeer.addSelectColumns(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(
                new ClienteRecordMapper(),
                0);
        compositeMapper.addMapper(
                new UtenteRecordMapper(),
                ClientePeer.numColumns);
        criteria.addJoin(ClientePeer.EMAIL,
            com.opcal.UtentePeer.EMAIL);

        correctBooleans(criteria);

        List<Cliente> result = new ArrayList<Cliente>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            Cliente obj1 = (Cliente) rawResultRow.get(0);
            Utente obj2 = (Utente) rawResultRow.get(1);

            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                Cliente temp_obj1 = result.get(j);
                com.opcal.Utente temp_obj2 = temp_obj1.getUtente();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addCliente(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initClientes();
                obj2.addCliente(obj1);
            }
            result.add(obj1);
        }
        return result;
    }


    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveIndirizzos(
            Cliente toLinkTo,
            Collection<Indirizzo> toSave) 
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            setAndSaveIndirizzos(toLinkTo, toSave, connection);
            Transaction.commit(connection);
        }
    }

    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     * @param connection the database connection to use.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveIndirizzos(
            Cliente toLinkTo,
            Collection<Indirizzo> toSave,
            Connection connection) 
        throws TorqueException
    {
        // make sure the collection cache in toLinkTo represents the current
        // database state
        toLinkTo.resetIndirizzo();
        toLinkTo.getIndirizzos(connection);
        ObjectKey<?> localKey = toLinkTo.getPrimaryKey();

        Criteria criteria = new Criteria();
        Criterion onlyReferencingCriterion = new Criterion(
                IndirizzoPeer.EMAIL_CLIENTE, 
                localKey);
        criteria.where(onlyReferencingCriterion);
        Set<ObjectKey<?>> toSaveKeys = new HashSet<ObjectKey<?>>();
        for (Indirizzo toSaveElement : toSave)
        {
            ObjectKey<?> toSaveKey = toSaveElement.getPrimaryKey();
            if (toSaveKey.getValue() != null)
            {
                toSaveKeys.add(toSaveKey);
            }
        }
        
        // calculate intersection between objects in the database
        // and objects in the list
        List<Indirizzo> intersection;
        if (toSaveKeys.isEmpty())
        {
            intersection = new ArrayList<Indirizzo>();
        }
        else
        {
            Criterion toSaveKeyCriterion = null;
            for (ObjectKey<?> toSaveKey : toSaveKeys)
            {
                SimpleKey<?>[] toSavePrimaryKeys = (SimpleKey[]) toSaveKey.getValue();
                 Criterion p0 = new Criterion(
                        IndirizzoPeer.COMUNE,
                        toSavePrimaryKeys[0]);
                 Criterion p1 = new Criterion(
                        IndirizzoPeer.VIA,
                        toSavePrimaryKeys[1]);
                p0.and(p1);
                 Criterion p2 = new Criterion(
                        IndirizzoPeer.CIVICO,
                        toSavePrimaryKeys[2]);
                p1.and(p2);
                if (toSaveKeyCriterion == null)
                {
                    toSaveKeyCriterion = p0;
                }
                else
                {
                    toSaveKeyCriterion.or(p0);
                }
            }
            criteria.and(toSaveKeyCriterion);
            intersection = IndirizzoPeer.doSelect(
                    criteria,
                    connection);
        }
        if (toLinkTo.isIndirizzosInitialized())
        {
            toLinkTo.getIndirizzos().clear();
        }
        else
        {
           toLinkTo.initIndirizzos();
        }
        for (Indirizzo toSaveElement : toSave)
        {
            int listIndex = intersection.indexOf(toSaveElement);
            if (listIndex == -1)
            {
                toLinkTo.addIndirizzo(toSaveElement);
                toSaveElement.save(connection);
            }
            else
            {
                toLinkTo.addIndirizzo(toSaveElement);
                toSaveElement.setNew(false);
                if (!toSaveElement.valueEquals(intersection.get(listIndex)))
                {
                    //force saving if content differs
                    toSaveElement.setModified(true);
                }
                toSaveElement.save(connection);
            }
            toSaveKeys.add(toSaveElement.getPrimaryKey());
        }
        
        // delete elements not in intersection
        Criteria deleteCriteria = new Criteria();
        deleteCriteria.where(onlyReferencingCriterion);
        if (!toSaveKeys.isEmpty())
        {
            Criterion toSaveKeyCriterion = null;
            for (ObjectKey<?> toSaveKey : toSaveKeys)
            {
                SimpleKey<?>[] toSavePrimaryKeys = (SimpleKey[]) toSaveKey.getValue();
                  Criterion p0 = new Criterion(
                         IndirizzoPeer.COMUNE,
                         toSavePrimaryKeys[0],
                         Criteria.NOT_EQUAL);
                  Criterion p1 = new Criterion(
                         IndirizzoPeer.VIA,
                         toSavePrimaryKeys[1],
                         Criteria.NOT_EQUAL);
                p0.or(p1);
                  Criterion p2 = new Criterion(
                         IndirizzoPeer.CIVICO,
                         toSavePrimaryKeys[2],
                         Criteria.NOT_EQUAL);
                p1.or(p2);
                if (toSaveKeyCriterion == null)
                {
                    toSaveKeyCriterion = p0;
                }
                else
                {
                    toSaveKeyCriterion.and(p0);
                }
            }
            deleteCriteria.and(toSaveKeyCriterion);
        }
        IndirizzoPeer.doDelete(deleteCriteria, connection);
    }
    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveRicevutas(
            Cliente toLinkTo,
            Collection<Ricevuta> toSave) 
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            setAndSaveRicevutas(toLinkTo, toSave, connection);
            Transaction.commit(connection);
        }
    }

    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     * @param connection the database connection to use.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveRicevutas(
            Cliente toLinkTo,
            Collection<Ricevuta> toSave,
            Connection connection) 
        throws TorqueException
    {
        // make sure the collection cache in toLinkTo represents the current
        // database state
        toLinkTo.resetRicevuta();
        toLinkTo.getRicevutas(connection);
        ObjectKey<?> localKey = toLinkTo.getPrimaryKey();

        Criteria criteria = new Criteria();
        Criterion onlyReferencingCriterion = new Criterion(
                RicevutaPeer.EMAIL_CLIENTE, 
                localKey);
        criteria.where(onlyReferencingCriterion);
        Set<ObjectKey<?>> toSaveKeys = new HashSet<ObjectKey<?>>();
        for (Ricevuta toSaveElement : toSave)
        {
            ObjectKey<?> toSaveKey = toSaveElement.getPrimaryKey();
            if (toSaveKey.getValue() != null)
            {
                toSaveKeys.add(toSaveKey);
            }
        }
        
        // calculate intersection between objects in the database
        // and objects in the list
        List<Ricevuta> intersection;
        if (toSaveKeys.isEmpty())
        {
            intersection = new ArrayList<Ricevuta>();
        }
        else
        {
            criteria.and(
                    RicevutaPeer.CODICE,
                     toSaveKeys,
                      Criteria.IN);
            intersection = RicevutaPeer.doSelect(
                    criteria,
                    connection);
        }
        if (toLinkTo.isRicevutasInitialized())
        {
            toLinkTo.getRicevutas().clear();
        }
        else
        {
           toLinkTo.initRicevutas();
        }
        for (Ricevuta toSaveElement : toSave)
        {
            int listIndex = intersection.indexOf(toSaveElement);
            if (listIndex == -1)
            {
                toLinkTo.addRicevuta(toSaveElement);
                toSaveElement.save(connection);
            }
            else
            {
                toLinkTo.addRicevuta(toSaveElement);
                toSaveElement.setNew(false);
                if (!toSaveElement.valueEquals(intersection.get(listIndex)))
                {
                    //force saving if content differs
                    toSaveElement.setModified(true);
                }
                toSaveElement.save(connection);
            }
            toSaveKeys.add(toSaveElement.getPrimaryKey());
        }
        
        // delete elements not in intersection
        Criteria deleteCriteria = new Criteria();
        deleteCriteria.where(onlyReferencingCriterion);
        if (!toSaveKeys.isEmpty())
        {
            deleteCriteria.and(
                    RicevutaPeer.CODICE, 
                    toSaveKeys, 
                    Criteria.NOT_IN);
        }
        RicevutaPeer.doDelete(deleteCriteria, connection);
    }
    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveSpedizioneRelatedByEmailMittentes(
            Cliente toLinkTo,
            Collection<Spedizione> toSave) 
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            setAndSaveSpedizioneRelatedByEmailMittentes(toLinkTo, toSave, connection);
            Transaction.commit(connection);
        }
    }

    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     * @param connection the database connection to use.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveSpedizioneRelatedByEmailMittentes(
            Cliente toLinkTo,
            Collection<Spedizione> toSave,
            Connection connection) 
        throws TorqueException
    {
        // make sure the collection cache in toLinkTo represents the current
        // database state
        toLinkTo.resetSpedizioneRelatedByEmailMittente();
        toLinkTo.getSpedizioneRelatedByEmailMittentes(connection);
        ObjectKey<?> localKey = toLinkTo.getPrimaryKey();

        Criteria criteria = new Criteria();
        Criterion onlyReferencingCriterion = new Criterion(
                SpedizionePeer.EMAIL_MITTENTE, 
                localKey);
        criteria.where(onlyReferencingCriterion);
        Set<ObjectKey<?>> toSaveKeys = new HashSet<ObjectKey<?>>();
        for (Spedizione toSaveElement : toSave)
        {
            ObjectKey<?> toSaveKey = toSaveElement.getPrimaryKey();
            if (toSaveKey.getValue() != null)
            {
                toSaveKeys.add(toSaveKey);
            }
        }
        
        // calculate intersection between objects in the database
        // and objects in the list
        List<Spedizione> intersection;
        if (toSaveKeys.isEmpty())
        {
            intersection = new ArrayList<Spedizione>();
        }
        else
        {
            criteria.and(
                    SpedizionePeer.CODICE,
                     toSaveKeys,
                      Criteria.IN);
            intersection = SpedizionePeer.doSelect(
                    criteria,
                    connection);
        }
        if (toLinkTo.isSpedizioneRelatedByEmailMittentesInitialized())
        {
            toLinkTo.getSpedizioneRelatedByEmailMittentes().clear();
        }
        else
        {
           toLinkTo.initSpedizioneRelatedByEmailMittentes();
        }
        for (Spedizione toSaveElement : toSave)
        {
            int listIndex = intersection.indexOf(toSaveElement);
            if (listIndex == -1)
            {
                toLinkTo.addSpedizioneRelatedByEmailMittente(toSaveElement);
                toSaveElement.save(connection);
            }
            else
            {
                toLinkTo.addSpedizioneRelatedByEmailMittente(toSaveElement);
                toSaveElement.setNew(false);
                if (!toSaveElement.valueEquals(intersection.get(listIndex)))
                {
                    //force saving if content differs
                    toSaveElement.setModified(true);
                }
                toSaveElement.save(connection);
            }
            toSaveKeys.add(toSaveElement.getPrimaryKey());
        }
        
        // delete elements not in intersection
        Criteria deleteCriteria = new Criteria();
        deleteCriteria.where(onlyReferencingCriterion);
        if (!toSaveKeys.isEmpty())
        {
            deleteCriteria.and(
                    SpedizionePeer.CODICE, 
                    toSaveKeys, 
                    Criteria.NOT_IN);
        }
        SpedizionePeer.doDelete(deleteCriteria, connection);
    }
    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveSpedizioneRelatedByEmailDestinatarios(
            Cliente toLinkTo,
            Collection<Spedizione> toSave) 
        throws TorqueException
    {
        try (TorqueConnection connection = Transaction.begin(getDatabaseName()))
        {
            setAndSaveSpedizioneRelatedByEmailDestinatarios(toLinkTo, toSave, connection);
            Transaction.commit(connection);
        }
    }

    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     * @param connection the database connection to use.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toSave is null or contains null elements.
     */
    public void setAndSaveSpedizioneRelatedByEmailDestinatarios(
            Cliente toLinkTo,
            Collection<Spedizione> toSave,
            Connection connection) 
        throws TorqueException
    {
        // make sure the collection cache in toLinkTo represents the current
        // database state
        toLinkTo.resetSpedizioneRelatedByEmailDestinatario();
        toLinkTo.getSpedizioneRelatedByEmailDestinatarios(connection);
        ObjectKey<?> localKey = toLinkTo.getPrimaryKey();

        Criteria criteria = new Criteria();
        Criterion onlyReferencingCriterion = new Criterion(
                SpedizionePeer.EMAIL_DESTINATARIO, 
                localKey);
        criteria.where(onlyReferencingCriterion);
        Set<ObjectKey<?>> toSaveKeys = new HashSet<ObjectKey<?>>();
        for (Spedizione toSaveElement : toSave)
        {
            ObjectKey<?> toSaveKey = toSaveElement.getPrimaryKey();
            if (toSaveKey.getValue() != null)
            {
                toSaveKeys.add(toSaveKey);
            }
        }
        
        // calculate intersection between objects in the database
        // and objects in the list
        List<Spedizione> intersection;
        if (toSaveKeys.isEmpty())
        {
            intersection = new ArrayList<Spedizione>();
        }
        else
        {
            criteria.and(
                    SpedizionePeer.CODICE,
                     toSaveKeys,
                      Criteria.IN);
            intersection = SpedizionePeer.doSelect(
                    criteria,
                    connection);
        }
        if (toLinkTo.isSpedizioneRelatedByEmailDestinatariosInitialized())
        {
            toLinkTo.getSpedizioneRelatedByEmailDestinatarios().clear();
        }
        else
        {
           toLinkTo.initSpedizioneRelatedByEmailDestinatarios();
        }
        for (Spedizione toSaveElement : toSave)
        {
            int listIndex = intersection.indexOf(toSaveElement);
            if (listIndex == -1)
            {
                toLinkTo.addSpedizioneRelatedByEmailDestinatario(toSaveElement);
                toSaveElement.save(connection);
            }
            else
            {
                toLinkTo.addSpedizioneRelatedByEmailDestinatario(toSaveElement);
                toSaveElement.setNew(false);
                if (!toSaveElement.valueEquals(intersection.get(listIndex)))
                {
                    //force saving if content differs
                    toSaveElement.setModified(true);
                }
                toSaveElement.save(connection);
            }
            toSaveKeys.add(toSaveElement.getPrimaryKey());
        }
        
        // delete elements not in intersection
        Criteria deleteCriteria = new Criteria();
        deleteCriteria.where(onlyReferencingCriterion);
        if (!toSaveKeys.isEmpty())
        {
            deleteCriteria.and(
                    SpedizionePeer.CODICE, 
                    toSaveKeys, 
                    Criteria.NOT_IN);
        }
        SpedizionePeer.doDelete(deleteCriteria, connection);
    }


}
